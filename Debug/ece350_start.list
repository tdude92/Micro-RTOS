
ece350_start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea4  08003ea4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ea4  08003ea4  00013ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eac  08003eac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000068  08003f1c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00008000  20000418  08003f1c  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008843  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ccb  00000000  00000000  0002891e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0002a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f5  00000000  00000000  0002adf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016787  00000000  00000000  0002b3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a6e2  00000000  00000000  00041b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086aca  00000000  00000000  0004c256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002640  00000000  00000000  000d2d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d5360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003dd8 	.word	0x08003dd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003dd8 	.word	0x08003dd8

080001e0 <SVC_Handler>:
.thumb_func
SVC_Handler:
	//.fnstart
	// https://developer.arm.com/documentation/ka004005/latest/
	//.global SVC_Handler_Main
    TST lr, #4
 80001e0:	f01e 0f04 	tst.w	lr, #4
    ITE EQ
 80001e4:	bf0c      	ite	eq
    MRSEQ r0, MSP
 80001e6:	f3ef 8008 	mrseq	r0, MSP
    MRSNE r0, PSP
 80001ea:	f3ef 8009 	mrsne	r0, PSP
    B SVC_Handler_Main
 80001ee:	f001 b8d3 	b.w	8001398 <SVC_Handler_Main>

080001f2 <PendSV_Handler>:
.thumb_func
PendSV_Handler:
	//.fnstart
	//.global PendSV_Handler

	bl disableIRQ
 80001f2:	f000 fcb8 	bl	8000b66 <disableIRQ>

	// move old task sp into r0
	MRS r0, PSP
 80001f6:	f3ef 8009 	mrs	r0, PSP
	// move old task r4 - r11 into memory
	STMDB r0!, {r4-r11}
 80001fa:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// c function to call for setting PSP, load psp of the new task ur switching into

	bl addTask
 80001fe:	f000 fc77 	bl	8000af0 <addTask>

	// move new task sp into r0
	MRS r0, PSP
 8000202:	f3ef 8009 	mrs	r0, PSP
	// move new task r4 - r11 into registers
	LDMIA r0!, {r4-r11}
 8000206:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Set new psp
	MSR PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

	bl enableIRQ
 800020e:	f000 fca1 	bl	8000b54 <enableIRQ>

	// magic number
	MOV LR, #0xFFFFFFFD
 8000212:	f06f 0e02 	mvn.w	lr, #2
	BX LR
 8000216:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <k_mem_init>:
uint8_t* SHEAP;

int menManIsReadyToTussle = 0;
freelist_node* freelist_head = 0;

数 k_mem_init() 开
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
	if (osState == DORMANT) {
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <k_mem_init+0x78>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d101      	bne.n	80005ce <k_mem_init+0x12>
		return RTX_ERR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e02b      	b.n	8000626 <k_mem_init+0x6a>
	}
	if (menManIsReadyToTussle) {
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <k_mem_init+0x7c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <k_mem_init+0x1e>
		// k_mem_init() has already been run. return error x3
		return RTX_ERR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e025      	b.n	8000626 <k_mem_init+0x6a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005da:	b672      	cpsid	i
}
 80005dc:	bf00      	nop
	}

	__disable_irq();

	uint8_t* IMG_END = &_img_end;  // The last address after the image.
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <k_mem_init+0x80>)
 80005e0:	60fb      	str	r3, [r7, #12]
	uint8_t* ESTACK = &_estack;  // The highest RAM address that can be accessed.
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <k_mem_init+0x84>)
 80005e4:	60bb      	str	r3, [r7, #8]
	uint8_t* MIN_STACK_SIZE = &_Min_Stack_Size;  // The size of the stack.
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <k_mem_init+0x88>)
 80005e8:	607b      	str	r3, [r7, #4]
	SHEAP = ESTACK - MIN_STACK_SIZE;
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <k_mem_init+0x8c>)
 80005f4:	601a      	str	r2, [r3, #0]

	// Initiate the first node of the freelist
	freelist_head = IMG_END;
 80005f6:	4a15      	ldr	r2, [pc, #84]	; (800064c <k_mem_init+0x90>)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	6013      	str	r3, [r2, #0]
	freelist_head->prev = NULL;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <k_mem_init+0x90>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
	freelist_head->next = NULL;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <k_mem_init+0x90>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
	freelist_head->size = SHEAP - IMG_END;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <k_mem_init+0x8c>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	1ad2      	subs	r2, r2, r3
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <k_mem_init+0x90>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	609a      	str	r2, [r3, #8]

	menManIsReadyToTussle = 1;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <k_mem_init+0x7c>)
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000620:	b662      	cpsie	i
}
 8000622:	bf00      	nop

	__enable_irq();

	return RTX_OK;
 8000624:	2300      	movs	r3, #0
停
 8000626:	4618      	mov	r0, r3
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000270 	.word	0x20000270
 8000638:	20000088 	.word	0x20000088
 800063c:	20008418 	.word	0x20008418
 8000640:	20018000 	.word	0x20018000
 8000644:	00004000 	.word	0x00004000
 8000648:	20000084 	.word	0x20000084
 800064c:	2000008c 	.word	0x2000008c

08000650 <k_mem_alloc>:

void* k_mem_alloc(size_type size) 开
 8000650:	b480      	push	{r7}
 8000652:	b089      	sub	sp, #36	; 0x24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if (!menManIsReadyToTussle) {
 8000658:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <k_mem_alloc+0x140>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <k_mem_alloc+0x14>
		// We haven't been initialized.
		return NULL;
 8000660:	2300      	movs	r3, #0
 8000662:	e08f      	b.n	8000784 <k_mem_alloc+0x134>
	}

	// NULL for size 0
	if (size == 0) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <k_mem_alloc+0x1e>
		return NULL;
 800066a:	2300      	movs	r3, #0
 800066c:	e08a      	b.n	8000784 <k_mem_alloc+0x134>
	}

	if (freelist_head == NULL) {
 800066e:	4b49      	ldr	r3, [pc, #292]	; (8000794 <k_mem_alloc+0x144>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <k_mem_alloc+0x2a>
		// There is NO FREE SPACE AT ALL.
		return NULL;
 8000676:	2300      	movs	r3, #0
 8000678:	e084      	b.n	8000784 <k_mem_alloc+0x134>
	}

	// Make sure our allocation is aligned.
	if (size%4 != 0) {
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f003 0303 	and.w	r3, r3, #3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d004      	beq.n	800068e <k_mem_alloc+0x3e>
		size = size + (4 - size%4);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f023 0303 	bic.w	r3, r3, #3
 800068a:	3304      	adds	r3, #4
 800068c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800068e:	b672      	cpsid	i
}
 8000690:	bf00      	nop
	}

	__disable_irq();

	freelist_node* curr = freelist_head;
 8000692:	4b40      	ldr	r3, [pc, #256]	; (8000794 <k_mem_alloc+0x144>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	61fb      	str	r3, [r7, #28]

	// Find the first block that fits the size
	while (curr != NULL) {
 8000698:	e06e      	b.n	8000778 <k_mem_alloc+0x128>
		if (curr->size >= size + sizeof(allocated_block_metadata)) {
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	330c      	adds	r3, #12
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d365      	bcc.n	8000772 <k_mem_alloc+0x122>
			// The curr block is big enough OwO

			uint32_t allocated_block_size = size + sizeof(allocated_block_metadata);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	330c      	adds	r3, #12
 80006aa:	61bb      	str	r3, [r7, #24]

			// Fix the freelist by creating a node for the remaining mem in
			// this block.
			if (allocated_block_size + sizeof(freelist_node) >= curr->size) {
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	f103 020c 	add.w	r2, r3, #12
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d31a      	bcc.n	80006f0 <k_mem_alloc+0xa0>
				// There's not enough space for a free block. We just give the
				// whole space to the requester.
				allocated_block_size = curr->size;
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	61bb      	str	r3, [r7, #24]
				if (curr->prev == NULL) {
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d104      	bne.n	80006d2 <k_mem_alloc+0x82>
					freelist_head = curr->next;
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	4a31      	ldr	r2, [pc, #196]	; (8000794 <k_mem_alloc+0x144>)
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	e004      	b.n	80006dc <k_mem_alloc+0x8c>
				} else {
					curr->prev->next = curr->next;
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	69fa      	ldr	r2, [r7, #28]
 80006d8:	6852      	ldr	r2, [r2, #4]
 80006da:	605a      	str	r2, [r3, #4]
				}
				if (curr->next != NULL) {
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d032      	beq.n	800074a <k_mem_alloc+0xfa>
					curr->next->prev = curr->prev;
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	69fa      	ldr	r2, [r7, #28]
 80006ea:	6812      	ldr	r2, [r2, #0]
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	e02c      	b.n	800074a <k_mem_alloc+0xfa>
				}
			} else {
				freelist_node* new_block = (uint8_t*)curr + allocated_block_size;
 80006f0:	69fa      	ldr	r2, [r7, #28]
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	4413      	add	r3, r2
 80006f6:	617b      	str	r3, [r7, #20]
				new_block->size = curr->size - allocated_block_size;
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	689a      	ldr	r2, [r3, #8]
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	1ad2      	subs	r2, r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	609a      	str	r2, [r3, #8]

				if (curr->prev == NULL) {
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d106      	bne.n	800071a <k_mem_alloc+0xca>
					// curr is the HEAD
					new_block->prev = NULL;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
					freelist_head = new_block;
 8000712:	4a20      	ldr	r2, [pc, #128]	; (8000794 <k_mem_alloc+0x144>)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	e007      	b.n	800072a <k_mem_alloc+0xda>
				} else {
					// connect this node in
					new_block->prev = curr->prev;
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	601a      	str	r2, [r3, #0]
					curr->prev->next = new_block;
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	697a      	ldr	r2, [r7, #20]
 8000728:	605a      	str	r2, [r3, #4]
				}

				if (curr->next == NULL) {
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d103      	bne.n	800073a <k_mem_alloc+0xea>
					// curr is the tail
					new_block->next = NULL;
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	e007      	b.n	800074a <k_mem_alloc+0xfa>
				} else {
					// connect this node in
					new_block->next = curr->next;
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	685a      	ldr	r2, [r3, #4]
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	605a      	str	r2, [r3, #4]
					curr->next->prev = new_block;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	601a      	str	r2, [r3, #0]
				}
			}

			// Create our metadata block
			allocated_block_metadata* curr_md_block = (allocated_block_metadata*) curr;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	613b      	str	r3, [r7, #16]
			curr_md_block->magic_number = 475581419;
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <k_mem_alloc+0x148>)
 8000752:	601a      	str	r2, [r3, #0]
			curr_md_block->size = allocated_block_size;
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	69ba      	ldr	r2, [r7, #24]
 8000758:	609a      	str	r2, [r3, #8]
			curr_md_block->tid = RUNNING_TID;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <k_mem_alloc+0x14c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	71da      	strb	r2, [r3, #7]

			uint32_t* return_address = curr_md_block + 1;
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	330c      	adds	r3, #12
 8000768:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800076a:	b662      	cpsie	i
}
 800076c:	bf00      	nop

			__enable_irq();
			return return_address;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	e008      	b.n	8000784 <k_mem_alloc+0x134>
		}
		// Ain't big enough, let's check the next block
		curr = curr->next;
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	61fb      	str	r3, [r7, #28]
	while (curr != NULL) {
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d18d      	bne.n	800069a <k_mem_alloc+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 800077e:	b662      	cpsie	i
}
 8000780:	bf00      	nop
	}

	// We reached the end without finding a block - error :<
	__enable_irq();
	return NULL;
 8000782:	2300      	movs	r3, #0
停
 8000784:	4618      	mov	r0, r3
 8000786:	3724      	adds	r7, #36	; 0x24
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	20000088 	.word	0x20000088
 8000794:	2000008c 	.word	0x2000008c
 8000798:	1c58cbeb 	.word	0x1c58cbeb
 800079c:	20000274 	.word	0x20000274

080007a0 <k_mem_dealloc>:

int k_mem_dealloc(void* ptr) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	// check that mem is allocated, if not, RTX_ERR
	if (!menManIsReadyToTussle) {
 80007a8:	4b47      	ldr	r3, [pc, #284]	; (80008c8 <k_mem_dealloc+0x128>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <k_mem_dealloc+0x14>
		// We haven't been initialized.
		return RTX_ERR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	e084      	b.n	80008be <k_mem_dealloc+0x11e>
	}

	// if ptr is null, RTX_OK
	if (ptr == NULL) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <k_mem_dealloc+0x1e>
		return RTX_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e07f      	b.n	80008be <k_mem_dealloc+0x11e>
  __ASM volatile ("cpsid i" : : : "memory");
 80007be:	b672      	cpsid	i
}
 80007c0:	bf00      	nop
	}

	__disable_irq();

	allocated_block_metadata* p_metadata = ptr - sizeof(allocated_block_metadata);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3b0c      	subs	r3, #12
 80007c6:	61bb      	str	r3, [r7, #24]
	// very, very low chance to randomly be correct on all of these aspects
	if (p_metadata->magic_number == MAGIC_NUMBER && p_metadata->tid <= MAX_TASKS && p_metadata->size <= (SHEAP - _img_end)) {
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a3f      	ldr	r2, [pc, #252]	; (80008cc <k_mem_dealloc+0x12c>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d172      	bne.n	80008b8 <k_mem_dealloc+0x118>
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	79db      	ldrb	r3, [r3, #7]
 80007d6:	2b10      	cmp	r3, #16
 80007d8:	d86e      	bhi.n	80008b8 <k_mem_dealloc+0x118>
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	4619      	mov	r1, r3
 80007e0:	4b3b      	ldr	r3, [pc, #236]	; (80008d0 <k_mem_dealloc+0x130>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <k_mem_dealloc+0x134>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	425b      	negs	r3, r3
 80007ea:	4413      	add	r3, r2
 80007ec:	4299      	cmp	r1, r3
 80007ee:	d863      	bhi.n	80008b8 <k_mem_dealloc+0x118>
		// check current task owns the memory
		if (RUNNING_TID != p_metadata->tid) {
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	79db      	ldrb	r3, [r3, #7]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b38      	ldr	r3, [pc, #224]	; (80008d8 <k_mem_dealloc+0x138>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d001      	beq.n	8000802 <k_mem_dealloc+0x62>
			return RTX_ERR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e05d      	b.n	80008be <k_mem_dealloc+0x11e>
		}

		// add back to freelist at the correct area

		uint32_t metadata_size = p_metadata->size;
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	617b      	str	r3, [r7, #20]
		freelist_node* saved = p_metadata;
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	613b      	str	r3, [r7, #16]

		// begin by iterating over freelist
		freelist_node* current = freelist_head;
 800080c:	4b33      	ldr	r3, [pc, #204]	; (80008dc <k_mem_dealloc+0x13c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	61fb      	str	r3, [r7, #28]
	
		if (freelist_head == NULL || ptr <= freelist_head) {
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <k_mem_dealloc+0x13c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <k_mem_dealloc+0x84>
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <k_mem_dealloc+0x13c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	d83f      	bhi.n	80008a4 <k_mem_dealloc+0x104>
			saved->next = freelist_head;
 8000824:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <k_mem_dealloc+0x13c>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	605a      	str	r2, [r3, #4]
			saved->prev = NULL;
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
			saved->size = metadata_size;
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	609a      	str	r2, [r3, #8]
			freelist_head = saved;
 8000838:	4a28      	ldr	r2, [pc, #160]	; (80008dc <k_mem_dealloc+0x13c>)
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	e034      	b.n	80008aa <k_mem_dealloc+0x10a>
		} else {
			while (current != NULL) {
				// non-head/non-tail
				if (current->next != NULL) {
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d01e      	beq.n	8000886 <k_mem_dealloc+0xe6>
					if ((uint8_t*)current + current->size <= ptr && ptr <= current->next) {
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	69fa      	ldr	r2, [r7, #28]
 800084e:	4413      	add	r3, r2
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	429a      	cmp	r2, r3
 8000854:	d323      	bcc.n	800089e <k_mem_dealloc+0xfe>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	d81e      	bhi.n	800089e <k_mem_dealloc+0xfe>
						// add it to list here, make appropriate disconnections
						freelist_node* old_next = current->next;
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	60fb      	str	r3, [r7, #12]
						saved->next = old_next;
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	605a      	str	r2, [r3, #4]
						old_next->prev = saved;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	601a      	str	r2, [r3, #0]

						saved->prev = current;
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	69fa      	ldr	r2, [r7, #28]
 8000876:	601a      	str	r2, [r3, #0]
						current->next = saved;
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	605a      	str	r2, [r3, #4]
						saved->size = metadata_size;
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	609a      	str	r2, [r3, #8]
						break;
 8000884:	e011      	b.n	80008aa <k_mem_dealloc+0x10a>
					// if it's not between, just continue
				}

				// tail
				else {
					current->next = saved;
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	605a      	str	r2, [r3, #4]
					saved->prev = current;
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	69fa      	ldr	r2, [r7, #28]
 8000890:	601a      	str	r2, [r3, #0]
					saved->next = NULL;
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
					saved->size = metadata_size;
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	609a      	str	r2, [r3, #8]
				}
				current = current->next;
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	61fb      	str	r3, [r7, #28]
			while (current != NULL) {
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1ca      	bne.n	8000840 <k_mem_dealloc+0xa0>
			}
			// is equivalent to freeing it, next thing can write over it, which is what we care about
		}

		coalesce(saved);
 80008aa:	6938      	ldr	r0, [r7, #16]
 80008ac:	f000 f818 	bl	80008e0 <coalesce>
  __ASM volatile ("cpsie i" : : : "memory");
 80008b0:	b662      	cpsie	i
}
 80008b2:	bf00      	nop

		__enable_irq();
		return RTX_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	e002      	b.n	80008be <k_mem_dealloc+0x11e>
  __ASM volatile ("cpsie i" : : : "memory");
 80008b8:	b662      	cpsie	i
}
 80008ba:	bf00      	nop

	} else {
		__enable_irq();
		return RTX_ERR;
 80008bc:	2301      	movs	r3, #1
	}

	// we haven't found the pointer, return an error, it must be outside of our memory
	__enable_irq();
	return RTX_ERR;
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3720      	adds	r7, #32
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000088 	.word	0x20000088
 80008cc:	1c58cbeb 	.word	0x1c58cbeb
 80008d0:	20000084 	.word	0x20000084
 80008d4:	20008418 	.word	0x20008418
 80008d8:	20000274 	.word	0x20000274
 80008dc:	2000008c 	.word	0x2000008c

080008e0 <coalesce>:
// current + current->size + 1 == current->next;
// if they are, combine them:
// 		- size of first one = size of first one + metadata block size + size of second one
//		- remove second one:  just disconnect?
// 
void coalesce(freelist_node* current) {
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	//co w right
	if (current->next != NULL) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d01d      	beq.n	800092c <coalesce+0x4c>
		//check if they are adjacent in mem
		if ((uint8_t*)current + current->size == current->next) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	441a      	add	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d115      	bne.n	800092c <coalesce+0x4c>
			freelist_node* second = current->next;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	60fb      	str	r3, [r7, #12]
			current->size = current->size + second->size;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	441a      	add	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	609a      	str	r2, [r3, #8]

			if (second->next != NULL) {
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d003      	beq.n	8000924 <coalesce+0x44>
				second->next->prev = current;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	601a      	str	r2, [r3, #0]
			}
			current->next = second->next;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	685a      	ldr	r2, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	605a      	str	r2, [r3, #4]
		}
	}

	// co w left
	if (current->prev != NULL) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d020      	beq.n	8000976 <coalesce+0x96>
		current = current->prev;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	607b      	str	r3, [r7, #4]
		if ((uint8_t*)current + current->size == current->next) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	441a      	add	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	429a      	cmp	r2, r3
 8000948:	d115      	bne.n	8000976 <coalesce+0x96>
			freelist_node* second = current->next;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	60bb      	str	r3, [r7, #8]
			current->size = current->size + second->size;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	441a      	add	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	609a      	str	r2, [r3, #8]

			if (second->next != NULL) {
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <coalesce+0x8e>
				second->next->prev = current;
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	601a      	str	r2, [r3, #0]
			}
			current->next = second->next;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	605a      	str	r2, [r3, #4]
		}
	}
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <_nullTask>:
volatile TCB tcbArray[MAX_TASKS + 1];
int osState = DORMANT;
int RUNNING_TID = TID_NULL;

// code that TID_NULL runs
void _nullTask() {
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
	while (1) {
		osYield();
 8000986:	f000 fb81 	bl	800108c <osYield>
 800098a:	e7fc      	b.n	8000986 <_nullTask+0x4>

0800098c <_initDormantTask>:
	}
}

void _initDormantTask(uint32_t tid) {
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	volatile TCB* tcb = &tcbArray[tid];
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4613      	mov	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	1a9b      	subs	r3, r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <_initDormantTask+0x54>)
 80009a0:	4413      	add	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop

	__disable_irq();

	tcb->ptask = NULL;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
	tcb->tid = tid;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	731a      	strb	r2, [r3, #12]
	tcb->state = DORMANT;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2200      	movs	r2, #0
 80009ba:	735a      	strb	r2, [r3, #13]
	tcb->stack_size = THREAD_STACK_SIZE;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c2:	81da      	strh	r2, [r3, #14]
	tcb->deadline = DEFAULT_DEADLINE;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2205      	movs	r2, #5
 80009c8:	611a      	str	r2, [r3, #16]
	tcb->original_deadline = DEFAULT_DEADLINE;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2205      	movs	r2, #5
 80009ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 80009d0:	b662      	cpsie	i
}
 80009d2:	bf00      	nop

	__enable_irq();
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20000094 	.word	0x20000094

080009e4 <_schedule>:

/**
 * @param currentTID The TID of the current task.
 * @returns int The TID of the next task to run.
 */
uint32_t _schedule(uint32_t currentTID) {
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	uint32_t lowestTID = currentTID;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	60fb      	str	r3, [r7, #12]
	for (uint32_t tid = 1; tid < MAX_TASKS + 1; tid++) {
 80009f0:	2301      	movs	r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	e03f      	b.n	8000a76 <_schedule+0x92>
		if (tcbArray[tid].state == READY){
 80009f6:	4925      	ldr	r1, [pc, #148]	; (8000a8c <_schedule+0xa8>)
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	4613      	mov	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	440b      	add	r3, r1
 8000a04:	330d      	adds	r3, #13
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d130      	bne.n	8000a70 <_schedule+0x8c>
			if(tcbArray[lowestTID].deadline > tcbArray[tid].deadline){
 8000a0e:	491f      	ldr	r1, [pc, #124]	; (8000a8c <_schedule+0xa8>)
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	4613      	mov	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	1a9b      	subs	r3, r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	3310      	adds	r3, #16
 8000a1e:	6819      	ldr	r1, [r3, #0]
 8000a20:	481a      	ldr	r0, [pc, #104]	; (8000a8c <_schedule+0xa8>)
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4613      	mov	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	1a9b      	subs	r3, r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4403      	add	r3, r0
 8000a2e:	3310      	adds	r3, #16
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4299      	cmp	r1, r3
 8000a34:	d902      	bls.n	8000a3c <_schedule+0x58>
				lowestTID = tid;
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	e019      	b.n	8000a70 <_schedule+0x8c>
			}
			else if (tcbArray[lowestTID].deadline == tcbArray[tid].deadline){
 8000a3c:	4913      	ldr	r1, [pc, #76]	; (8000a8c <_schedule+0xa8>)
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4613      	mov	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	1a9b      	subs	r3, r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	440b      	add	r3, r1
 8000a4a:	3310      	adds	r3, #16
 8000a4c:	6819      	ldr	r1, [r3, #0]
 8000a4e:	480f      	ldr	r0, [pc, #60]	; (8000a8c <_schedule+0xa8>)
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	4613      	mov	r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	1a9b      	subs	r3, r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4403      	add	r3, r0
 8000a5c:	3310      	adds	r3, #16
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4299      	cmp	r1, r3
 8000a62:	d105      	bne.n	8000a70 <_schedule+0x8c>
				if (lowestTID > tid){
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d901      	bls.n	8000a70 <_schedule+0x8c>
					lowestTID = tid;
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60fb      	str	r3, [r7, #12]
	for (uint32_t tid = 1; tid < MAX_TASKS + 1; tid++) {
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	3301      	adds	r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	2b10      	cmp	r3, #16
 8000a7a:	d9bc      	bls.n	80009f6 <_schedule+0x12>
				}
			}
		}
	}
	return lowestTID;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000094 	.word	0x20000094

08000a90 <_dispatch>:

// warning! set currTID state before calling this
task_t PREV_TID = TID_NULL;
void _dispatch(uint32_t currTID, uint32_t newTID) {
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9a:	b672      	cpsid	i
}
 8000a9c:	bf00      	nop
	__disable_irq();
	// Switch tasks
	tcbArray[newTID].state = RUNNING;
 8000a9e:	4910      	ldr	r1, [pc, #64]	; (8000ae0 <_dispatch+0x50>)
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	440b      	add	r3, r1
 8000aac:	330d      	adds	r3, #13
 8000aae:	2202      	movs	r2, #2
 8000ab0:	701a      	strb	r2, [r3, #0]
	PREV_TID = currTID;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <_dispatch+0x54>)
 8000ab8:	701a      	strb	r2, [r3, #0]
	RUNNING_TID = newTID;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <_dispatch+0x58>)
 8000abe:	6013      	str	r3, [r2, #0]
	// Context switch
	_ICSR |= 1<<28; // control register bit for a PendSV interrupt
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <_dispatch+0x5c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a09      	ldr	r2, [pc, #36]	; (8000aec <_dispatch+0x5c>)
 8000ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aca:	6013      	str	r3, [r2, #0]
	__asm("isb");
 8000acc:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8000ad0:	b662      	cpsie	i
}
 8000ad2:	bf00      	nop
	__enable_irq();
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	20000094 	.word	0x20000094
 8000ae4:	20000278 	.word	0x20000278
 8000ae8:	20000274 	.word	0x20000274
 8000aec:	e000ed04 	.word	0xe000ed04

08000af0 <addTask>:

extern void addTask(){
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000af6:	f3ef 8309 	mrs	r3, PSP
 8000afa:	607b      	str	r3, [r7, #4]
  return(result);
 8000afc:	687b      	ldr	r3, [r7, #4]
	tcbArray[PREV_TID].sp = __get_PSP() - 32;
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <addTask+0x58>)
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	4610      	mov	r0, r2
 8000b04:	f1a3 0220 	sub.w	r2, r3, #32
 8000b08:	4910      	ldr	r1, [pc, #64]	; (8000b4c <addTask+0x5c>)
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	1a1b      	subs	r3, r3, r0
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	440b      	add	r3, r1
 8000b14:	3308      	adds	r3, #8
 8000b16:	601a      	str	r2, [r3, #0]
	uint32_t *top_ptr = tcbArray[RUNNING_TID].sp;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <addTask+0x60>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	490b      	ldr	r1, [pc, #44]	; (8000b4c <addTask+0x5c>)
 8000b1e:	4613      	mov	r3, r2
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	1a9b      	subs	r3, r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	440b      	add	r3, r1
 8000b28:	3308      	adds	r3, #8
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
	__set_PSP((uint32_t)top_ptr);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	f383 8809 	msr	PSP, r3
}
 8000b38:	bf00      	nop
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000278 	.word	0x20000278
 8000b4c:	20000094 	.word	0x20000094
 8000b50:	20000274 	.word	0x20000274

08000b54 <enableIRQ>:

extern void enableIRQ(){
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000b58:	b662      	cpsie	i
}
 8000b5a:	bf00      	nop
	__enable_irq();
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <disableIRQ>:

extern void disableIRQ(){
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6a:	b672      	cpsid	i
}
 8000b6c:	bf00      	nop
	__disable_irq();
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <k_helper_tick_all>:

// Tick all deadlines
void k_helper_tick_all(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
	if (osState != RUNNING) {
 8000b7e:	4b56      	ldr	r3, [pc, #344]	; (8000cd8 <k_helper_tick_all+0x160>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	f040 80a3 	bne.w	8000cce <k_helper_tick_all+0x156>
		return;
	}

	int yielded = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
	for (int i = 1; i < MAX_TASKS + 1; i++) {
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	e098      	b.n	8000cc4 <k_helper_tick_all+0x14c>
		if (tcbArray[i].state != DORMANT){
 8000b92:	4952      	ldr	r1, [pc, #328]	; (8000cdc <k_helper_tick_all+0x164>)
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	4613      	mov	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	330d      	adds	r3, #13
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8089 	beq.w	8000cbe <k_helper_tick_all+0x146>
			tcbArray[i].deadline -= 1;
 8000bac:	494b      	ldr	r1, [pc, #300]	; (8000cdc <k_helper_tick_all+0x164>)
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	440b      	add	r3, r1
 8000bba:	3310      	adds	r3, #16
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	1e59      	subs	r1, r3, #1
 8000bc0:	4846      	ldr	r0, [pc, #280]	; (8000cdc <k_helper_tick_all+0x164>)
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	1a9b      	subs	r3, r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4403      	add	r3, r0
 8000bce:	3310      	adds	r3, #16
 8000bd0:	6019      	str	r1, [r3, #0]
			if (tcbArray[i].deadline == 0) {
 8000bd2:	4942      	ldr	r1, [pc, #264]	; (8000cdc <k_helper_tick_all+0x164>)
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	1a9b      	subs	r3, r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	440b      	add	r3, r1
 8000be0:	3310      	adds	r3, #16
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d124      	bne.n	8000c32 <k_helper_tick_all+0xba>
				tcbArray[i].deadline = tcbArray[i].original_deadline;
 8000be8:	493c      	ldr	r1, [pc, #240]	; (8000cdc <k_helper_tick_all+0x164>)
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	4613      	mov	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	3314      	adds	r3, #20
 8000bf8:	6819      	ldr	r1, [r3, #0]
 8000bfa:	4838      	ldr	r0, [pc, #224]	; (8000cdc <k_helper_tick_all+0x164>)
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4403      	add	r3, r0
 8000c08:	3310      	adds	r3, #16
 8000c0a:	6019      	str	r1, [r3, #0]
				if (!yielded && tcbArray[i].state == RUNNING){
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10f      	bne.n	8000c32 <k_helper_tick_all+0xba>
 8000c12:	4932      	ldr	r1, [pc, #200]	; (8000cdc <k_helper_tick_all+0x164>)
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	4613      	mov	r3, r2
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	1a9b      	subs	r3, r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	330d      	adds	r3, #13
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d103      	bne.n	8000c32 <k_helper_tick_all+0xba>
					osYield();
 8000c2a:	f000 fa2f 	bl	800108c <osYield>
					yielded = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
				}

			}

			if(tcbArray[i].state == SLEEPING){
 8000c32:	492a      	ldr	r1, [pc, #168]	; (8000cdc <k_helper_tick_all+0x164>)
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	4613      	mov	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	330d      	adds	r3, #13
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d139      	bne.n	8000cbe <k_helper_tick_all+0x146>
				tcbArray[i].sleep_time -= 1;
 8000c4a:	4924      	ldr	r1, [pc, #144]	; (8000cdc <k_helper_tick_all+0x164>)
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	440b      	add	r3, r1
 8000c58:	3318      	adds	r3, #24
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1e59      	subs	r1, r3, #1
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <k_helper_tick_all+0x164>)
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4403      	add	r3, r0
 8000c6c:	3318      	adds	r3, #24
 8000c6e:	6019      	str	r1, [r3, #0]
				if (tcbArray[i].sleep_time == 0){
 8000c70:	491a      	ldr	r1, [pc, #104]	; (8000cdc <k_helper_tick_all+0x164>)
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	4613      	mov	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3318      	adds	r3, #24
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d11b      	bne.n	8000cbe <k_helper_tick_all+0x146>
					tcbArray[i].deadline = tcbArray[i].original_deadline;
 8000c86:	4915      	ldr	r1, [pc, #84]	; (8000cdc <k_helper_tick_all+0x164>)
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	440b      	add	r3, r1
 8000c94:	3314      	adds	r3, #20
 8000c96:	6819      	ldr	r1, [r3, #0]
 8000c98:	4810      	ldr	r0, [pc, #64]	; (8000cdc <k_helper_tick_all+0x164>)
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	1a9b      	subs	r3, r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4403      	add	r3, r0
 8000ca6:	3310      	adds	r3, #16
 8000ca8:	6019      	str	r1, [r3, #0]
					tcbArray[i].state = READY;
 8000caa:	490c      	ldr	r1, [pc, #48]	; (8000cdc <k_helper_tick_all+0x164>)
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	330d      	adds	r3, #13
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < MAX_TASKS + 1; i++) {
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	2b10      	cmp	r3, #16
 8000cc8:	f77f af63 	ble.w	8000b92 <k_helper_tick_all+0x1a>
 8000ccc:	e000      	b.n	8000cd0 <k_helper_tick_all+0x158>
		return;
 8000cce:	bf00      	nop
				}
			}
		}
	}
}
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000270 	.word	0x20000270
 8000cdc:	20000094 	.word	0x20000094

08000ce0 <osKernelInit>:

void osKernelInit(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce6:	b672      	cpsid	i
}
 8000ce8:	bf00      	nop
	__disable_irq();

	MSP_INIT_VAL = *(uint32_t**)0x0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a2f      	ldr	r2, [pc, #188]	; (8000dac <osKernelInit+0xcc>)
 8000cf0:	6013      	str	r3, [r2, #0]

	for (uint32_t tid = 1; tid < MAX_TASKS + 1; tid++) {
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e005      	b.n	8000d04 <osKernelInit+0x24>
		_initDormantTask(tid);
 8000cf8:	6978      	ldr	r0, [r7, #20]
 8000cfa:	f7ff fe47 	bl	800098c <_initDormantTask>
	for (uint32_t tid = 1; tid < MAX_TASKS + 1; tid++) {
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	2b10      	cmp	r3, #16
 8000d08:	d9f6      	bls.n	8000cf8 <osKernelInit+0x18>
	}

	osState = READY;
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <osKernelInit+0xd0>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
	k_mem_init();
 8000d10:	f7ff fc54 	bl	80005bc <k_mem_init>

	const uint32_t nullTaskStackSize = 0x100;
 8000d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d18:	60bb      	str	r3, [r7, #8]
	const uint32_t nullTaskDeadline = 4294967295; // uint32 max
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	607b      	str	r3, [r7, #4]

	tcbArray[TID_NULL].tid = TID_NULL;
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <osKernelInit+0xd4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	731a      	strb	r2, [r3, #12]
	tcbArray[TID_NULL].ptask = _nullTask;
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <osKernelInit+0xd4>)
 8000d28:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <osKernelInit+0xd8>)
 8000d2a:	601a      	str	r2, [r3, #0]
	tcbArray[TID_NULL].stack_size = nullTaskStackSize;
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <osKernelInit+0xd4>)
 8000d32:	81da      	strh	r2, [r3, #14]
	tcbArray[TID_NULL].stack_high = (uint32_t*)((k_mem_alloc(nullTaskStackSize) + nullTaskStackSize));
 8000d34:	68b8      	ldr	r0, [r7, #8]
 8000d36:	f7ff fc8b 	bl	8000650 <k_mem_alloc>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4413      	add	r3, r2
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <osKernelInit+0xd4>)
 8000d44:	605a      	str	r2, [r3, #4]
	tcbArray[TID_NULL].sp = tcbArray[TID_NULL].stack_high;
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <osKernelInit+0xd4>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <osKernelInit+0xd4>)
 8000d4c:	6093      	str	r3, [r2, #8]
	tcbArray[TID_NULL].deadline = nullTaskDeadline;
 8000d4e:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <osKernelInit+0xd4>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6113      	str	r3, [r2, #16]
	tcbArray[TID_NULL].original_deadline = nullTaskDeadline;
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <osKernelInit+0xd4>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6153      	str	r3, [r2, #20]

	uint32_t* stackptr = (uint32_t*)tcbArray[TID_NULL].sp;
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <osKernelInit+0xd4>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	613b      	str	r3, [r7, #16]
	*(--stackptr) = 1 << 24;
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	3b04      	subs	r3, #4
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d6c:	601a      	str	r2, [r3, #0]
	*(--stackptr) = (uint32_t)tcbArray[TID_NULL].ptask;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <osKernelInit+0xd4>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	3b04      	subs	r3, #4
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 14; i++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e008      	b.n	8000d94 <osKernelInit+0xb4>
		*(--stackptr) = 0xA;
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	3b04      	subs	r3, #4
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	220a      	movs	r2, #10
 8000d8c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 14; i++) {
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3301      	adds	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b0d      	cmp	r3, #13
 8000d98:	ddf3      	ble.n	8000d82 <osKernelInit+0xa2>
	}
	tcbArray[TID_NULL].sp =(uint32_t)stackptr;
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <osKernelInit+0xd4>)
 8000d9e:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000da0:	b662      	cpsie	i
}
 8000da2:	bf00      	nop

	__enable_irq();
}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000090 	.word	0x20000090
 8000db0:	20000270 	.word	0x20000270
 8000db4:	20000094 	.word	0x20000094
 8000db8:	08000983 	.word	0x08000983

08000dbc <osCreateTask>:

// matthews note: maran ma said to make sure provided tcb is updated to match _tid(tcb)
int osCreateTask(TCB* task){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	int return_value = RTX_ERR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
    for (uint8_t tid = 1; tid < MAX_TASKS + 1; tid++) {
 8000dc8:	2301      	movs	r3, #1
 8000dca:	76fb      	strb	r3, [r7, #27]
 8000dcc:	e0ec      	b.n	8000fa8 <osCreateTask+0x1ec>
    	if (tcbArray[tid].state == DORMANT) {
 8000dce:	7efa      	ldrb	r2, [r7, #27]
 8000dd0:	498e      	ldr	r1, [pc, #568]	; (800100c <osCreateTask+0x250>)
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	330d      	adds	r3, #13
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 80dd 	bne.w	8000fa2 <osCreateTask+0x1e6>
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
    		// We found a task/slot to create this one in. This task is already
    		// created with stack ptr, tid, etc. Check osKernelInit().

    		__disable_irq();

            task_t currRunning = RUNNING_TID;
 8000dec:	4b88      	ldr	r3, [pc, #544]	; (8001010 <osCreateTask+0x254>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	73fb      	strb	r3, [r7, #15]
            if(currRunning != TID_NULL){
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d016      	beq.n	8000e26 <osCreateTask+0x6a>
            	tcbArray[currRunning].state = READY;
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	4984      	ldr	r1, [pc, #528]	; (800100c <osCreateTask+0x250>)
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	1a9b      	subs	r3, r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	440b      	add	r3, r1
 8000e06:	330d      	adds	r3, #13
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
            	tcbArray[tid].state = RUNNING;
 8000e0c:	7efa      	ldrb	r2, [r7, #27]
 8000e0e:	497f      	ldr	r1, [pc, #508]	; (800100c <osCreateTask+0x250>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	330d      	adds	r3, #13
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	701a      	strb	r2, [r3, #0]
				RUNNING_TID = tid;
 8000e20:	7efb      	ldrb	r3, [r7, #27]
 8000e22:	4a7b      	ldr	r2, [pc, #492]	; (8001010 <osCreateTask+0x254>)
 8000e24:	6013      	str	r3, [r2, #0]
            }

            uint32_t* stack = (uint32_t*)k_mem_alloc(task->stack_size);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	89db      	ldrh	r3, [r3, #14]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fc10 	bl	8000650 <k_mem_alloc>
 8000e30:	60b8      	str	r0, [r7, #8]
            if (stack == 0) {
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <osCreateTask+0x80>
            	return RTX_ERR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e0e3      	b.n	8001004 <osCreateTask+0x248>
            }

        	tcbArray[tid].ptask = task->ptask;
 8000e3c:	7efa      	ldrb	r2, [r7, #27]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	4872      	ldr	r0, [pc, #456]	; (800100c <osCreateTask+0x250>)
 8000e44:	4613      	mov	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	1a9b      	subs	r3, r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4403      	add	r3, r0
 8000e4e:	6019      	str	r1, [r3, #0]
			tcbArray[tid].stack_size = task->stack_size;
 8000e50:	7efa      	ldrb	r2, [r7, #27]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	89d8      	ldrh	r0, [r3, #14]
 8000e56:	496d      	ldr	r1, [pc, #436]	; (800100c <osCreateTask+0x250>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	1a9b      	subs	r3, r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	330e      	adds	r3, #14
 8000e64:	4602      	mov	r2, r0
 8000e66:	801a      	strh	r2, [r3, #0]
			tcbArray[tid].stack_high = stack + task->stack_size;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	89db      	ldrh	r3, [r3, #14]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	4413      	add	r3, r2
 8000e72:	7efa      	ldrb	r2, [r7, #27]
 8000e74:	4618      	mov	r0, r3
 8000e76:	4965      	ldr	r1, [pc, #404]	; (800100c <osCreateTask+0x250>)
 8000e78:	4613      	mov	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	3304      	adds	r3, #4
 8000e84:	6018      	str	r0, [r3, #0]
			tcbArray[tid].sp = tcbArray[tid].stack_high;
 8000e86:	7ef9      	ldrb	r1, [r7, #27]
 8000e88:	7efa      	ldrb	r2, [r7, #27]
 8000e8a:	4860      	ldr	r0, [pc, #384]	; (800100c <osCreateTask+0x250>)
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4403      	add	r3, r0
 8000e96:	3304      	adds	r3, #4
 8000e98:	6819      	ldr	r1, [r3, #0]
 8000e9a:	485c      	ldr	r0, [pc, #368]	; (800100c <osCreateTask+0x250>)
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4403      	add	r3, r0
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	6019      	str	r1, [r3, #0]
			tcbArray[tid].original_deadline = task->deadline;
 8000eaa:	7efa      	ldrb	r2, [r7, #27]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6919      	ldr	r1, [r3, #16]
 8000eb0:	4856      	ldr	r0, [pc, #344]	; (800100c <osCreateTask+0x250>)
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	1a9b      	subs	r3, r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4403      	add	r3, r0
 8000ebc:	3314      	adds	r3, #20
 8000ebe:	6019      	str	r1, [r3, #0]
			task->tid = tcbArray[tid].tid;
 8000ec0:	7efa      	ldrb	r2, [r7, #27]
 8000ec2:	4952      	ldr	r1, [pc, #328]	; (800100c <osCreateTask+0x250>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	1a9b      	subs	r3, r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	330c      	adds	r3, #12
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	731a      	strb	r2, [r3, #12]

			if (task->deadline != 0) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00a      	beq.n	8000ef6 <osCreateTask+0x13a>
				tcbArray[tid].deadline = task->deadline;
 8000ee0:	7efa      	ldrb	r2, [r7, #27]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6919      	ldr	r1, [r3, #16]
 8000ee6:	4849      	ldr	r0, [pc, #292]	; (800100c <osCreateTask+0x250>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4403      	add	r3, r0
 8000ef2:	3310      	adds	r3, #16
 8000ef4:	6019      	str	r1, [r3, #0]
			}

			if (currRunning != TID_NULL) {
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00c      	beq.n	8000f16 <osCreateTask+0x15a>
				tcbArray[currRunning].state = RUNNING;
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	4943      	ldr	r1, [pc, #268]	; (800100c <osCreateTask+0x250>)
 8000f00:	4613      	mov	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	330d      	adds	r3, #13
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	701a      	strb	r2, [r3, #0]
				RUNNING_TID = currRunning;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4a3f      	ldr	r2, [pc, #252]	; (8001010 <osCreateTask+0x254>)
 8000f14:	6013      	str	r3, [r2, #0]
			}
			tcbArray[tid].state = READY;
 8000f16:	7efa      	ldrb	r2, [r7, #27]
 8000f18:	493c      	ldr	r1, [pc, #240]	; (800100c <osCreateTask+0x250>)
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	330d      	adds	r3, #13
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]

			uint32_t* stackptr = (uint32_t*)tcbArray[tid].sp;
 8000f2a:	7efa      	ldrb	r2, [r7, #27]
 8000f2c:	4937      	ldr	r1, [pc, #220]	; (800100c <osCreateTask+0x250>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	3308      	adds	r3, #8
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	617b      	str	r3, [r7, #20]
			*(--stackptr) = 1 << 24;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3b04      	subs	r3, #4
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f4a:	601a      	str	r2, [r3, #0]
			*(--stackptr) = (uint32_t)tcbArray[tid].ptask;
 8000f4c:	7efa      	ldrb	r2, [r7, #27]
 8000f4e:	492f      	ldr	r1, [pc, #188]	; (800100c <osCreateTask+0x250>)
 8000f50:	4613      	mov	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 14; i++) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	e008      	b.n	8000f7e <osCreateTask+0x1c2>
				*(--stackptr) = 0xA;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	220a      	movs	r2, #10
 8000f76:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 14; i++) {
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2b0d      	cmp	r3, #13
 8000f82:	ddf3      	ble.n	8000f6c <osCreateTask+0x1b0>
			}
			tcbArray[tid].sp =(uint32_t)stackptr;
 8000f84:	7efa      	ldrb	r2, [r7, #27]
 8000f86:	6979      	ldr	r1, [r7, #20]
 8000f88:	4820      	ldr	r0, [pc, #128]	; (800100c <osCreateTask+0x250>)
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4403      	add	r3, r0
 8000f94:	3308      	adds	r3, #8
 8000f96:	6019      	str	r1, [r3, #0]
            return_value = RTX_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f9c:	b662      	cpsie	i
}
 8000f9e:	bf00      	nop

            __enable_irq();

            break;
 8000fa0:	e006      	b.n	8000fb0 <osCreateTask+0x1f4>
    for (uint8_t tid = 1; tid < MAX_TASKS + 1; tid++) {
 8000fa2:	7efb      	ldrb	r3, [r7, #27]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	76fb      	strb	r3, [r7, #27]
 8000fa8:	7efb      	ldrb	r3, [r7, #27]
 8000faa:	2b10      	cmp	r3, #16
 8000fac:	f67f af0f 	bls.w	8000dce <osCreateTask+0x12>

    // TODO investigate if need to disable interrupts here
    //      yes disable: test to ensure that ctx switch actually happens
    //      no disable: what if systick preemption happens here but
    //                  the child task is about to be dispatched?
    if (
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d125      	bne.n	8001002 <osCreateTask+0x246>
		return_value == RTX_OK &&
		RUNNING_TID != TID_NULL &&
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <osCreateTask+0x254>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
		return_value == RTX_OK &&
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d021      	beq.n	8001002 <osCreateTask+0x246>
		tcbArray[RUNNING_TID].deadline > task->deadline
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <osCreateTask+0x254>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4912      	ldr	r1, [pc, #72]	; (800100c <osCreateTask+0x250>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	1a9b      	subs	r3, r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	3310      	adds	r3, #16
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
		RUNNING_TID != TID_NULL &&
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d913      	bls.n	8001002 <osCreateTask+0x246>
	) {
    	// preempt
		tcbArray[RUNNING_TID].state = READY;
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <osCreateTask+0x254>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	490b      	ldr	r1, [pc, #44]	; (800100c <osCreateTask+0x250>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	330d      	adds	r3, #13
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
		_dispatch(RUNNING_TID, task->tid);
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <osCreateTask+0x254>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7b1b      	ldrb	r3, [r3, #12]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	f7ff fd47 	bl	8000a90 <_dispatch>
    }

    return return_value;
 8001002:	69fb      	ldr	r3, [r7, #28]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000094 	.word	0x20000094
 8001010:	20000274 	.word	0x20000274

08001014 <osKernelStart>:

int osKernelStart(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	// Only start the kernel if it has been initialized and is not running.
	if (osState != READY) {
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <osKernelStart+0x6c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d001      	beq.n	8001026 <osKernelStart+0x12>
		return RTX_ERR;
 8001022:	2301      	movs	r3, #1
 8001024:	e028      	b.n	8001078 <osKernelStart+0x64>
	}

	// Start the first task we find that's not dormant.
	int tid = _schedule(0);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fcdc 	bl	80009e4 <_schedule>
 800102c:	4603      	mov	r3, r0
 800102e:	607b      	str	r3, [r7, #4]
	osState = RUNNING;
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <osKernelStart+0x6c>)
 8001032:	2202      	movs	r2, #2
 8001034:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001036:	b672      	cpsid	i
}
 8001038:	bf00      	nop

	__disable_irq();
	tcbArray[tid].state = RUNNING;
 800103a:	4912      	ldr	r1, [pc, #72]	; (8001084 <osKernelStart+0x70>)
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	330d      	adds	r3, #13
 800104a:	2202      	movs	r2, #2
 800104c:	701a      	strb	r2, [r3, #0]
	RUNNING_TID = tid;
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <osKernelStart+0x74>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6013      	str	r3, [r2, #0]
	__set_PSP(tcbArray[tid].sp);
 8001054:	490b      	ldr	r1, [pc, #44]	; (8001084 <osKernelStart+0x70>)
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	3308      	adds	r3, #8
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	f383 8809 	msr	PSP, r3
}
 800106e:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001070:	b662      	cpsie	i
}
 8001072:	bf00      	nop
	__enable_irq();

	__asm("SVC #7");
 8001074:	df07      	svc	7

	return RTX_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000270 	.word	0x20000270
 8001084:	20000094 	.word	0x20000094
 8001088:	20000274 	.word	0x20000274

0800108c <osYield>:

void osYield(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001092:	b672      	cpsid	i
}
 8001094:	bf00      	nop
	__disable_irq(); // irq re-enabled in _dispatch

	// Set current task to ready
	tcbArray[RUNNING_TID].state = READY;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <osYield+0x40>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	490d      	ldr	r1, [pc, #52]	; (80010d0 <osYield+0x44>)
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	330d      	adds	r3, #13
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
	uint32_t newTID = _schedule(RUNNING_TID);
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <osYield+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fc97 	bl	80009e4 <_schedule>
 80010b6:	6078      	str	r0, [r7, #4]
	_dispatch(RUNNING_TID, newTID);
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <osYield+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fce6 	bl	8000a90 <_dispatch>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000274 	.word	0x20000274
 80010d0:	20000094 	.word	0x20000094

080010d4 <osSleep>:
	_dispatch(RUNNING_TID, newTID);

	return RTX_OK;
}

void osSleep(int timeInMs){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if (RUNNING_TID != TID_NULL){
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <osSleep+0x5c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d021      	beq.n	8001128 <osSleep+0x54>
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
		__disable_irq(); // irq re-enabled in _dispatch
		tcbArray[RUNNING_TID].state = SLEEPING;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <osSleep+0x5c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4911      	ldr	r1, [pc, #68]	; (8001134 <osSleep+0x60>)
 80010ee:	4613      	mov	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	1a9b      	subs	r3, r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	330d      	adds	r3, #13
 80010fa:	2203      	movs	r2, #3
 80010fc:	701a      	strb	r2, [r3, #0]
		tcbArray[RUNNING_TID].sleep_time = timeInMs;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <osSleep+0x5c>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <osSleep+0x60>)
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4403      	add	r3, r0
 8001110:	3318      	adds	r3, #24
 8001112:	6019      	str	r1, [r3, #0]

		uint32_t newTID = _schedule(0);
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff fc65 	bl	80009e4 <_schedule>
 800111a:	60f8      	str	r0, [r7, #12]
		_dispatch(RUNNING_TID, newTID);
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <osSleep+0x5c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fcb4 	bl	8000a90 <_dispatch>
	}

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000274 	.word	0x20000274
 8001134:	20000094 	.word	0x20000094

08001138 <osPeriodYield>:

void osPeriodYield() {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	if (RUNNING_TID != TID_NULL) {
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <osPeriodYield+0x38>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d010      	beq.n	8001168 <osPeriodYield+0x30>
  __ASM volatile ("cpsid i" : : : "memory");
 8001146:	b672      	cpsid	i
}
 8001148:	bf00      	nop
		__disable_irq(); // irq re-enabled in osSleep
		uint32_t currDeadline = tcbArray[RUNNING_TID].deadline;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <osPeriodYield+0x38>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4909      	ldr	r1, [pc, #36]	; (8001174 <osPeriodYield+0x3c>)
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	1a9b      	subs	r3, r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	3310      	adds	r3, #16
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	607b      	str	r3, [r7, #4]
		osSleep(currDeadline);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ffb6 	bl	80010d4 <osSleep>
	}
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000274 	.word	0x20000274
 8001174:	20000094 	.word	0x20000094

08001178 <osCreateDeadlineTask>:
	}

	return RTX_OK;
}

int osCreateDeadlineTask(int deadline, int s_size, TCB* task) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	if (deadline <= 0) {
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	dc01      	bgt.n	800118e <osCreateDeadlineTask+0x16>
		return RTX_ERR;
 800118a:	2301      	movs	r3, #1
 800118c:	e010      	b.n	80011b0 <osCreateDeadlineTask+0x38>
	}

	if (s_size < STACK_SIZE) {
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001194:	da01      	bge.n	800119a <osCreateDeadlineTask+0x22>
		return RTX_ERR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00a      	b.n	80011b0 <osCreateDeadlineTask+0x38>
	}

	task->deadline = deadline;
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	611a      	str	r2, [r3, #16]
	task->stack_size = s_size;
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	81da      	strh	r2, [r3, #14]
	return osCreateTask(task);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fe07 	bl	8000dbc <osCreateTask>
 80011ae:	4603      	mov	r3, r0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <bomboclat>:
int wagwanctr = 0;
int ahliectr = 0;

uint32_t* donkeykong = NULL;

void bomboclat(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	while(1) {
		donkeykong = (uint32_t*)k_mem_alloc(sizeof(uint32_t)*10);
 80011be:	2028      	movs	r0, #40	; 0x28
 80011c0:	f7ff fa46 	bl	8000650 <k_mem_alloc>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <bomboclat+0x44>)
 80011c8:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 10; ++i) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	e009      	b.n	80011e4 <bomboclat+0x2c>
			donkeykong[i] = i;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <bomboclat+0x44>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 10; ++i) {
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3301      	adds	r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b09      	cmp	r3, #9
 80011e8:	ddf2      	ble.n	80011d0 <bomboclat+0x18>
		}
		osPeriodYield();
 80011ea:	f7ff ffa5 	bl	8001138 <osPeriodYield>
		k_mem_dealloc(donkeykong);
 80011ee:	4b03      	ldr	r3, [pc, #12]	; (80011fc <bomboclat+0x44>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fad4 	bl	80007a0 <k_mem_dealloc>
		donkeykong = (uint32_t*)k_mem_alloc(sizeof(uint32_t)*10);
 80011f8:	e7e1      	b.n	80011be <bomboclat+0x6>
 80011fa:	bf00      	nop
 80011fc:	2000027c 	.word	0x2000027c

08001200 <wagwan>:
//		printf("bomboCLAt! %d\r\n", bomboclatctr);
//		__enable_irq();
	}
}

void wagwan(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	while(1) {
		osPeriodYield();
 8001206:	f7ff ff97 	bl	8001138 <osPeriodYield>
		for (int i = 0; i < 10; ++i) {
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	e00e      	b.n	800122e <wagwan+0x2e>
			printf("wagwan addr: %d, i: %d,  val: %d\r\n", donkeykong, i, donkeykong[i]);
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <wagwan+0x38>)
 8001212:	6819      	ldr	r1, [r3, #0]
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <wagwan+0x38>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <wagwan+0x3c>)
 8001224:	f001 ff08 	bl	8003038 <iprintf>
		for (int i = 0; i < 10; ++i) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b09      	cmp	r3, #9
 8001232:	dded      	ble.n	8001210 <wagwan+0x10>
		osPeriodYield();
 8001234:	e7e7      	b.n	8001206 <wagwan+0x6>
 8001236:	bf00      	nop
 8001238:	2000027c 	.word	0x2000027c
 800123c:	08003df0 	.word	0x08003df0

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0

  /* MCU Configuration: Don't change this or the whole chip won't work!*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001246:	f000 fae5 	bl	8001814 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 800124a:	f000 f9af 	bl	80015ac <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124e:	f000 fa43 	bl	80016d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001252:	f000 fa17 	bl	8001684 <MX_USART2_UART_Init>
  /* MCU Configuration is now complete. Start writing your code below this line */

  printf("\r\n\r\nNEW RUN STARTED ----------------- \r\n\r\n\r\n");
 8001256:	4814      	ldr	r0, [pc, #80]	; (80012a8 <main+0x68>)
 8001258:	f001 ff54 	bl	8003104 <puts>

  // Initialize kernel structures.
  osKernelInit();
 800125c:	f7ff fd40 	bl	8000ce0 <osKernelInit>

	// Create a test task.
	TCB newTask;
	newTask.ptask = (void(*)(void*))bomboclat;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <main+0x6c>)
 8001262:	61fb      	str	r3, [r7, #28]
	osCreateDeadlineTask(1000, 0x400, &newTask);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	461a      	mov	r2, r3
 800126a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001272:	f7ff ff81 	bl	8001178 <osCreateDeadlineTask>

	TCB newTask2;
	newTask2.ptask = (void(*)(void*))wagwan;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <main+0x70>)
 8001278:	603b      	str	r3, [r7, #0]
	osCreateDeadlineTask(2000, 0x400, &newTask2);
 800127a:	463b      	mov	r3, r7
 800127c:	461a      	mov	r2, r3
 800127e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001282:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001286:	f7ff ff77 	bl	8001178 <osCreateDeadlineTask>

	printf("%d %d\r\n", newTask.tid, newTask2.tid);
 800128a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800128e:	4619      	mov	r1, r3
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	461a      	mov	r2, r3
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <main+0x74>)
 8001296:	f001 fecf 	bl	8003038 <iprintf>
//  newTask4.ptask = (void(*)(void*))print_continuously_test;
//  osCreateTask(&newTask4);


  // Start the kernel :>
  osKernelStart();
 800129a:	f7ff febb 	bl	8001014 <osKernelStart>
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3738      	adds	r7, #56	; 0x38
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	08003e14 	.word	0x08003e14
 80012ac:	080011b9 	.word	0x080011b9
 80012b0:	08001201 	.word	0x08001201
 80012b4:	08003e40 	.word	0x08003e40

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_MspInit+0x4c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x4c>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012f6:	2007      	movs	r0, #7
 80012f8:	f000 fbb0 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_UART_MspInit+0x84>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12b      	bne.n	8001382 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_UART_MspInit+0x88>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_UART_MspInit+0x88>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001362:	230c      	movs	r3, #12
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001372:	2307      	movs	r3, #7
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <HAL_UART_MspInit+0x8c>)
 800137e:	f000 fba1 	bl	8001ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40004400 	.word	0x40004400
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000

08001398 <SVC_Handler_Main>:
/******************************************************************************/
/*           Custom handlers										          */
/******************************************************************************/
//extern void SVC_Handler(void);

void SVC_Handler_Main(unsigned int* svc_args) {
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	/*
	* Stack contains:
	* r0, r1, r2, r3, r12, r14, the return address and xPSR
	* First argument (r0) is svc_args[0]
	*/
	svc_number = ( ( char * )svc_args[ 6 ] )[ -2 ];
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3318      	adds	r3, #24
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3b02      	subs	r3, #2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
	switch (svc_number) {
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	d109      	bne.n	80013c6 <SVC_Handler_Main+0x2e>
		case 7:
			// run first task
			__asm("MRS r0, PSP");
 80013b2:	f3ef 8009 	mrs	r0, PSP
			//__asm("SUB r0, 64");
			__asm("LDMIA r0!, {r4, r5, r6, r7, r8, r9, r10, r11}");
 80013b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
			//__asm("ADD r0, 32");
			__asm("MSR PSP, r0");
 80013ba:	f380 8809 	msr	PSP, r0
			__asm("MOV LR, #0xFFFFFFFD");
 80013be:	f06f 0e02 	mvn.w	lr, #2
			__asm("BX LR");
 80013c2:	4770      	bx	lr
			break;
 80013c4:	e000      	b.n	80013c8 <SVC_Handler_Main+0x30>
		default:
			break;
 80013c6:	bf00      	nop
	}
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>
	...

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
printf("imposters win \r\n");
 80013e0:	4801      	ldr	r0, [pc, #4]	; (80013e8 <HardFault_Handler+0xc>)
 80013e2:	f001 fe8f 	bl	8003104 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0xa>
 80013e8:	08003e48 	.word	0x08003e48

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 fa52 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  k_helper_tick_all();
 8001414:	f7ff fbb0 	bl	8000b78 <k_helper_tick_all>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e00a      	b.n	8001444 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800142e:	f3af 8000 	nop.w
 8001432:	4601      	mov	r1, r0
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	b2ca      	uxtb	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf0      	blt.n	800142e <_read+0x12>
  }

  return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e009      	b.n	800147c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f889 	bl	8001588 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbf1      	blt.n	8001468 <_write+0x12>
  }
  return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_close>:

int _close(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b6:	605a      	str	r2, [r3, #4]
  return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_isatty>:

int _isatty(int file)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f001 ff1a 	bl	8003360 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20018000 	.word	0x20018000
 8001558:	00004000 	.word	0x00004000
 800155c:	20000280 	.word	0x20000280
 8001560:	20000418 	.word	0x20000418

08001564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__io_putchar>:
//Needed for printf
UART_HandleTypeDef huart2;


int __io_putchar(int ch)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,&ch,1,HAL_MAX_DELAY);
 8001590:	1d39      	adds	r1, r7, #4
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	2201      	movs	r2, #1
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <__io_putchar+0x20>)
 800159a:	f001 f916 	bl	80027ca <HAL_UART_Transmit>
	return ch;
 800159e:	687b      	ldr	r3, [r7, #4]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000284 	.word	0x20000284

080015ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b094      	sub	sp, #80	; 0x50
 80015b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	2230      	movs	r2, #48	; 0x30
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 fe82 	bl	80032c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	4b29      	ldr	r3, [pc, #164]	; (800167c <SystemClock_Config+0xd0>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a28      	ldr	r2, [pc, #160]	; (800167c <SystemClock_Config+0xd0>)
 80015da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <SystemClock_Config+0xd0>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <SystemClock_Config+0xd4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015f8:	4a21      	ldr	r2, [pc, #132]	; (8001680 <SystemClock_Config+0xd4>)
 80015fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <SystemClock_Config+0xd4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800160c:	2302      	movs	r3, #2
 800160e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001610:	2301      	movs	r3, #1
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001614:	2310      	movs	r3, #16
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001618:	2302      	movs	r3, #2
 800161a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800161c:	2300      	movs	r3, #0
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001620:	2310      	movs	r3, #16
 8001622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001624:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800162a:	2304      	movs	r3, #4
 800162c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800162e:	2307      	movs	r3, #7
 8001630:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fbe2 	bl	8001e00 <HAL_RCC_OscConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001642:	f000 f8b7 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001646:	230f      	movs	r3, #15
 8001648:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164a:	2302      	movs	r3, #2
 800164c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	2102      	movs	r1, #2
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fe44 	bl	80022f0 <HAL_RCC_ClockConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800166e:	f000 f8a1 	bl	80017b4 <Error_Handler>
  }
}
 8001672:	bf00      	nop
 8001674:	3750      	adds	r7, #80	; 0x50
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40007000 	.word	0x40007000

08001684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <MX_USART2_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016bc:	f001 f838 	bl	8002730 <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c6:	f000 f875 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000284 	.word	0x20000284
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <MX_GPIO_Init+0xd0>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <MX_GPIO_Init+0xd0>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <MX_GPIO_Init+0xd0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_GPIO_Init+0xd0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a1e      	ldr	r2, [pc, #120]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <MX_GPIO_Init+0xd0>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2120      	movs	r1, #32
 8001762:	4812      	ldr	r0, [pc, #72]	; (80017ac <MX_GPIO_Init+0xd4>)
 8001764:	f000 fb32 	bl	8001dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	480c      	ldr	r0, [pc, #48]	; (80017b0 <MX_GPIO_Init+0xd8>)
 8001780:	f000 f9a0 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001784:	2320      	movs	r3, #32
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_GPIO_Init+0xd4>)
 800179c:	f000 f992 	bl	8001ac4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020800 	.word	0x40020800

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	e7fe      	b.n	80017bc <Error_Handler+0x8>
	...

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c6:	490e      	ldr	r1, [pc, #56]	; (8001800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017dc:	4c0b      	ldr	r4, [pc, #44]	; (800180c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ea:	f7ff febb 	bl	8001564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f001 fdbd 	bl	800336c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7ff fd25 	bl	8001240 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001804:	08003eb4 	.word	0x08003eb4
  ldr r2, =_sbss
 8001808:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800180c:	20000418 	.word	0x20000418

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f90d 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fd36 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f917 	bl	8001aaa <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 f8ed 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000008 	.word	0x20000008
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008
 80018dc:	200002c8 	.word	0x200002c8

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200002c8 	.word	0x200002c8

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f7ff ff8e 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff47 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff5c 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff8e 	bl	80019b0 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5d 	bl	800195c <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffb0 	bl	8001a18 <SysTick_Config>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	e159      	b.n	8001d94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8148 	bne.w	8001d8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d005      	beq.n	8001b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d130      	bne.n	8001b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 0201 	and.w	r2, r3, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d017      	beq.n	8001bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d123      	bne.n	8001c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	08da      	lsrs	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3208      	adds	r2, #8
 8001bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	08da      	lsrs	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3208      	adds	r2, #8
 8001c02:	69b9      	ldr	r1, [r7, #24]
 8001c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0203 	and.w	r2, r3, #3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80a2 	beq.w	8001d8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b57      	ldr	r3, [pc, #348]	; (8001dac <HAL_GPIO_Init+0x2e8>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	4a56      	ldr	r2, [pc, #344]	; (8001dac <HAL_GPIO_Init+0x2e8>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c58:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5a:	4b54      	ldr	r3, [pc, #336]	; (8001dac <HAL_GPIO_Init+0x2e8>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c66:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_GPIO_Init+0x2ec>)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a49      	ldr	r2, [pc, #292]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d019      	beq.n	8001cc6 <HAL_GPIO_Init+0x202>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a48      	ldr	r2, [pc, #288]	; (8001db8 <HAL_GPIO_Init+0x2f4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0x1fe>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a47      	ldr	r2, [pc, #284]	; (8001dbc <HAL_GPIO_Init+0x2f8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00d      	beq.n	8001cbe <HAL_GPIO_Init+0x1fa>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a46      	ldr	r2, [pc, #280]	; (8001dc0 <HAL_GPIO_Init+0x2fc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x1f6>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a45      	ldr	r2, [pc, #276]	; (8001dc4 <HAL_GPIO_Init+0x300>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_GPIO_Init+0x1f2>
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e008      	b.n	8001cc8 <HAL_GPIO_Init+0x204>
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x204>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x204>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x204>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x204>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd8:	4935      	ldr	r1, [pc, #212]	; (8001db0 <HAL_GPIO_Init+0x2ec>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a24      	ldr	r2, [pc, #144]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5e:	4a1a      	ldr	r2, [pc, #104]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	f67f aea2 	bls.w	8001ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40013c00 	.word	0x40013c00

08001dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ddc:	787b      	ldrb	r3, [r7, #1]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de8:	e003      	b.n	8001df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	041a      	lsls	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	619a      	str	r2, [r3, #24]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e267      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d075      	beq.n	8001f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e1e:	4b88      	ldr	r3, [pc, #544]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d00c      	beq.n	8001e44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2a:	4b85      	ldr	r3, [pc, #532]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d112      	bne.n	8001e5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e36:	4b82      	ldr	r3, [pc, #520]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e42:	d10b      	bne.n	8001e5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	4b7e      	ldr	r3, [pc, #504]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d05b      	beq.n	8001f08 <HAL_RCC_OscConfig+0x108>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d157      	bne.n	8001f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e242      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e64:	d106      	bne.n	8001e74 <HAL_RCC_OscConfig+0x74>
 8001e66:	4b76      	ldr	r3, [pc, #472]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a75      	ldr	r2, [pc, #468]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xb0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x98>
 8001e7e:	4b70      	ldr	r3, [pc, #448]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6f      	ldr	r2, [pc, #444]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b6d      	ldr	r3, [pc, #436]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6c      	ldr	r2, [pc, #432]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xb0>
 8001e98:	4b69      	ldr	r3, [pc, #420]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a68      	ldr	r2, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b66      	ldr	r3, [pc, #408]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a65      	ldr	r2, [pc, #404]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fd12 	bl	80018e0 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fd0e 	bl	80018e0 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e207      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b5b      	ldr	r3, [pc, #364]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xc0>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fcfe 	bl	80018e0 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fcfa 	bl	80018e0 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1f3      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	4b51      	ldr	r3, [pc, #324]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xe8>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d063      	beq.n	8001fde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f16:	4b4a      	ldr	r3, [pc, #296]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b44      	ldr	r3, [pc, #272]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x152>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e1c7      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4937      	ldr	r1, [pc, #220]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	e03a      	b.n	8001fde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	4b34      	ldr	r3, [pc, #208]	; (8002044 <HAL_RCC_OscConfig+0x244>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff fcb3 	bl	80018e0 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fcaf 	bl	80018e0 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1a8      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4925      	ldr	r1, [pc, #148]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
 8001fb0:	e015      	b.n	8001fde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_OscConfig+0x244>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fc92 	bl	80018e0 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7ff fc8e 	bl	80018e0 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e187      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d036      	beq.n	8002058 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d016      	beq.n	8002020 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_RCC_OscConfig+0x248>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7ff fc72 	bl	80018e0 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002000:	f7ff fc6e 	bl	80018e0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e167      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8002014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x200>
 800201e:	e01b      	b.n	8002058 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_RCC_OscConfig+0x248>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff fc5b 	bl	80018e0 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202c:	e00e      	b.n	800204c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202e:	f7ff fc57 	bl	80018e0 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d907      	bls.n	800204c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e150      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
 8002040:	40023800 	.word	0x40023800
 8002044:	42470000 	.word	0x42470000
 8002048:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b88      	ldr	r3, [pc, #544]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ea      	bne.n	800202e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8097 	beq.w	8002194 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b81      	ldr	r3, [pc, #516]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10f      	bne.n	8002096 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	4b7d      	ldr	r3, [pc, #500]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a7c      	ldr	r2, [pc, #496]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002092:	2301      	movs	r3, #1
 8002094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002096:	4b77      	ldr	r3, [pc, #476]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d118      	bne.n	80020d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a2:	4b74      	ldr	r3, [pc, #464]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a73      	ldr	r2, [pc, #460]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ae:	f7ff fc17 	bl	80018e0 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b6:	f7ff fc13 	bl	80018e0 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e10c      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	4b6a      	ldr	r3, [pc, #424]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x2ea>
 80020dc:	4b64      	ldr	r3, [pc, #400]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	4a63      	ldr	r2, [pc, #396]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70
 80020e8:	e01c      	b.n	8002124 <HAL_RCC_OscConfig+0x324>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0x30c>
 80020f2:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a5e      	ldr	r2, [pc, #376]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
 80020fe:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a5b      	ldr	r2, [pc, #364]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6713      	str	r3, [r2, #112]	; 0x70
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0x324>
 800210c:	4b58      	ldr	r3, [pc, #352]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4a57      	ldr	r2, [pc, #348]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	6713      	str	r3, [r2, #112]	; 0x70
 8002118:	4b55      	ldr	r3, [pc, #340]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	4a54      	ldr	r2, [pc, #336]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800211e:	f023 0304 	bic.w	r3, r3, #4
 8002122:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d015      	beq.n	8002158 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7ff fbd8 	bl	80018e0 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002132:	e00a      	b.n	800214a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f7ff fbd4 	bl	80018e0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e0cb      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214a:	4b49      	ldr	r3, [pc, #292]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0ee      	beq.n	8002134 <HAL_RCC_OscConfig+0x334>
 8002156:	e014      	b.n	8002182 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002158:	f7ff fbc2 	bl	80018e0 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7ff fbbe 	bl	80018e0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0b5      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002176:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1ee      	bne.n	8002160 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002188:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	4a38      	ldr	r2, [pc, #224]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800218e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002192:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a1 	beq.w	80022e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800219e:	4b34      	ldr	r3, [pc, #208]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d05c      	beq.n	8002264 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d141      	bne.n	8002236 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_RCC_OscConfig+0x478>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff fb92 	bl	80018e0 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c0:	f7ff fb8e 	bl	80018e0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e087      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	4b27      	ldr	r3, [pc, #156]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	019b      	lsls	r3, r3, #6
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	3b01      	subs	r3, #1
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	061b      	lsls	r3, r3, #24
 8002202:	491b      	ldr	r1, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_OscConfig+0x478>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7ff fb67 	bl	80018e0 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002216:	f7ff fb63 	bl	80018e0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e05c      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x416>
 8002234:	e054      	b.n	80022e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_RCC_OscConfig+0x478>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff fb50 	bl	80018e0 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff fb4c 	bl	80018e0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e045      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x444>
 8002262:	e03d      	b.n	80022e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e038      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000
 8002278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x4ec>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d028      	beq.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d121      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d11a      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d111      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	3b01      	subs	r3, #1
 80022c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800

080022f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0cc      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d90c      	bls.n	800232c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b65      	ldr	r3, [pc, #404]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b8      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	494d      	ldr	r1, [pc, #308]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d044      	beq.n	8002410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d119      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e067      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4934      	ldr	r1, [pc, #208]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e0:	f7ff fa7e 	bl	80018e0 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7ff fa7a 	bl	80018e0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e04f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d20c      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e032      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4916      	ldr	r1, [pc, #88]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002476:	f000 f821 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 800247a:	4602      	mov	r2, r0
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	490a      	ldr	r1, [pc, #40]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	5ccb      	ldrb	r3, [r1, r3]
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff f9de 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08003e58 	.word	0x08003e58
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000004 	.word	0x20000004

080024bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c0:	b094      	sub	sp, #80	; 0x50
 80024c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
 80024c8:	2300      	movs	r3, #0
 80024ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024cc:	2300      	movs	r3, #0
 80024ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d4:	4b79      	ldr	r3, [pc, #484]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d00d      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x40>
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	f200 80e1 	bhi.w	80026a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x34>
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ee:	e0db      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b73      	ldr	r3, [pc, #460]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80024f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024f4:	e0db      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f6:	4b73      	ldr	r3, [pc, #460]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80024f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024fa:	e0d8      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024fc:	4b6f      	ldr	r3, [pc, #444]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002504:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002506:	4b6d      	ldr	r3, [pc, #436]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d063      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002512:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	2200      	movs	r2, #0
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
 800251c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
 800252a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800252e:	4622      	mov	r2, r4
 8002530:	462b      	mov	r3, r5
 8002532:	f04f 0000 	mov.w	r0, #0
 8002536:	f04f 0100 	mov.w	r1, #0
 800253a:	0159      	lsls	r1, r3, #5
 800253c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002540:	0150      	lsls	r0, r2, #5
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4621      	mov	r1, r4
 8002548:	1a51      	subs	r1, r2, r1
 800254a:	6139      	str	r1, [r7, #16]
 800254c:	4629      	mov	r1, r5
 800254e:	eb63 0301 	sbc.w	r3, r3, r1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002560:	4659      	mov	r1, fp
 8002562:	018b      	lsls	r3, r1, #6
 8002564:	4651      	mov	r1, sl
 8002566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800256a:	4651      	mov	r1, sl
 800256c:	018a      	lsls	r2, r1, #6
 800256e:	4651      	mov	r1, sl
 8002570:	ebb2 0801 	subs.w	r8, r2, r1
 8002574:	4659      	mov	r1, fp
 8002576:	eb63 0901 	sbc.w	r9, r3, r1
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800258a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	4623      	mov	r3, r4
 8002594:	eb18 0303 	adds.w	r3, r8, r3
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	462b      	mov	r3, r5
 800259c:	eb49 0303 	adc.w	r3, r9, r3
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ae:	4629      	mov	r1, r5
 80025b0:	024b      	lsls	r3, r1, #9
 80025b2:	4621      	mov	r1, r4
 80025b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025b8:	4621      	mov	r1, r4
 80025ba:	024a      	lsls	r2, r1, #9
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c2:	2200      	movs	r2, #0
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025cc:	f7fd fe78 	bl	80002c0 <__aeabi_uldivmod>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4613      	mov	r3, r2
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025d8:	e058      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	2200      	movs	r2, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	4611      	mov	r1, r2
 80025e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025ea:	623b      	str	r3, [r7, #32]
 80025ec:	2300      	movs	r3, #0
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025f4:	4642      	mov	r2, r8
 80025f6:	464b      	mov	r3, r9
 80025f8:	f04f 0000 	mov.w	r0, #0
 80025fc:	f04f 0100 	mov.w	r1, #0
 8002600:	0159      	lsls	r1, r3, #5
 8002602:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002606:	0150      	lsls	r0, r2, #5
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4641      	mov	r1, r8
 800260e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002612:	4649      	mov	r1, r9
 8002614:	eb63 0b01 	sbc.w	fp, r3, r1
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002624:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002628:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800262c:	ebb2 040a 	subs.w	r4, r2, sl
 8002630:	eb63 050b 	sbc.w	r5, r3, fp
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	00eb      	lsls	r3, r5, #3
 800263e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002642:	00e2      	lsls	r2, r4, #3
 8002644:	4614      	mov	r4, r2
 8002646:	461d      	mov	r5, r3
 8002648:	4643      	mov	r3, r8
 800264a:	18e3      	adds	r3, r4, r3
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	464b      	mov	r3, r9
 8002650:	eb45 0303 	adc.w	r3, r5, r3
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002662:	4629      	mov	r1, r5
 8002664:	028b      	lsls	r3, r1, #10
 8002666:	4621      	mov	r1, r4
 8002668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800266c:	4621      	mov	r1, r4
 800266e:	028a      	lsls	r2, r1, #10
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	2200      	movs	r2, #0
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	61fa      	str	r2, [r7, #28]
 800267c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002680:	f7fd fe1e 	bl	80002c0 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	3301      	adds	r3, #1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800269c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800269e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026a6:	e002      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3750      	adds	r7, #80	; 0x50
 80026b4:	46bd      	mov	sp, r7
 80026b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	00f42400 	.word	0x00f42400
 80026c4:	007a1200 	.word	0x007a1200

080026c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000000 	.word	0x20000000

080026e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026e4:	f7ff fff0 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0a9b      	lsrs	r3, r3, #10
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4903      	ldr	r1, [pc, #12]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40023800 	.word	0x40023800
 8002704:	08003e68 	.word	0x08003e68

08002708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800270c:	f7ff ffdc 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0b5b      	lsrs	r3, r3, #13
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4903      	ldr	r1, [pc, #12]	; (800272c <HAL_RCC_GetPCLK2Freq+0x24>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	08003e68 	.word	0x08003e68

08002730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e03f      	b.n	80027c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe fdd6 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f929 	bl	80029cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b08a      	sub	sp, #40	; 0x28
 80027ce:	af02      	add	r7, sp, #8
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	4613      	mov	r3, r2
 80027d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d17c      	bne.n	80028e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_UART_Transmit+0x2c>
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e075      	b.n	80028e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_UART_Transmit+0x3e>
 8002804:	2302      	movs	r3, #2
 8002806:	e06e      	b.n	80028e6 <HAL_UART_Transmit+0x11c>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2221      	movs	r2, #33	; 0x21
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281e:	f7ff f85f 	bl	80018e0 <HAL_GetTick>
 8002822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002838:	d108      	bne.n	800284c <HAL_UART_Transmit+0x82>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d104      	bne.n	800284c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	e003      	b.n	8002854 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800285c:	e02a      	b.n	80028b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f840 	bl	80028ee <UART_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e036      	b.n	80028e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10b      	bne.n	8002896 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800288c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	3302      	adds	r3, #2
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	e007      	b.n	80028a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	3301      	adds	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1cf      	bne.n	800285e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2140      	movs	r1, #64	; 0x40
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f810 	bl	80028ee <UART_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e006      	b.n	80028e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b090      	sub	sp, #64	; 0x40
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	4613      	mov	r3, r2
 80028fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fe:	e050      	b.n	80029a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002906:	d04c      	beq.n	80029a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <UART_WaitOnFlagUntilTimeout+0x30>
 800290e:	f7fe ffe7 	bl	80018e0 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800291a:	429a      	cmp	r2, r3
 800291c:	d241      	bcs.n	80029a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	e853 3f00 	ldrex	r3, [r3]
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800293e:	637a      	str	r2, [r7, #52]	; 0x34
 8002940:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002946:	e841 2300 	strex	r3, r2, [r1]
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e5      	bne.n	800291e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3314      	adds	r3, #20
 8002958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	e853 3f00 	ldrex	r3, [r3]
 8002960:	613b      	str	r3, [r7, #16]
   return(result);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	63bb      	str	r3, [r7, #56]	; 0x38
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3314      	adds	r3, #20
 8002970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002972:	623a      	str	r2, [r7, #32]
 8002974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002976:	69f9      	ldr	r1, [r7, #28]
 8002978:	6a3a      	ldr	r2, [r7, #32]
 800297a:	e841 2300 	strex	r3, r2, [r1]
 800297e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1e5      	bne.n	8002952 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e00f      	b.n	80029c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d09f      	beq.n	8002900 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3740      	adds	r7, #64	; 0x40
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d0:	b0c0      	sub	sp, #256	; 0x100
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	68d9      	ldr	r1, [r3, #12]
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	ea40 0301 	orr.w	r3, r0, r1
 80029f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a24:	f021 010c 	bic.w	r1, r1, #12
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a32:	430b      	orrs	r3, r1
 8002a34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a46:	6999      	ldr	r1, [r3, #24]
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	ea40 0301 	orr.w	r3, r0, r1
 8002a52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b8f      	ldr	r3, [pc, #572]	; (8002c98 <UART_SetConfig+0x2cc>)
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d005      	beq.n	8002a6c <UART_SetConfig+0xa0>
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b8d      	ldr	r3, [pc, #564]	; (8002c9c <UART_SetConfig+0x2d0>)
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d104      	bne.n	8002a76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a6c:	f7ff fe4c 	bl	8002708 <HAL_RCC_GetPCLK2Freq>
 8002a70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a74:	e003      	b.n	8002a7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a76:	f7ff fe33 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8002a7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a88:	f040 810c 	bne.w	8002ca4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a90:	2200      	movs	r2, #0
 8002a92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	462b      	mov	r3, r5
 8002aa2:	1891      	adds	r1, r2, r2
 8002aa4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002aa6:	415b      	adcs	r3, r3
 8002aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002aae:	4621      	mov	r1, r4
 8002ab0:	eb12 0801 	adds.w	r8, r2, r1
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	eb43 0901 	adc.w	r9, r3, r1
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ace:	4690      	mov	r8, r2
 8002ad0:	4699      	mov	r9, r3
 8002ad2:	4623      	mov	r3, r4
 8002ad4:	eb18 0303 	adds.w	r3, r8, r3
 8002ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002adc:	462b      	mov	r3, r5
 8002ade:	eb49 0303 	adc.w	r3, r9, r3
 8002ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002af2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002af6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002afa:	460b      	mov	r3, r1
 8002afc:	18db      	adds	r3, r3, r3
 8002afe:	653b      	str	r3, [r7, #80]	; 0x50
 8002b00:	4613      	mov	r3, r2
 8002b02:	eb42 0303 	adc.w	r3, r2, r3
 8002b06:	657b      	str	r3, [r7, #84]	; 0x54
 8002b08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b10:	f7fd fbd6 	bl	80002c0 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4b61      	ldr	r3, [pc, #388]	; (8002ca0 <UART_SetConfig+0x2d4>)
 8002b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	011c      	lsls	r4, r3, #4
 8002b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b34:	4642      	mov	r2, r8
 8002b36:	464b      	mov	r3, r9
 8002b38:	1891      	adds	r1, r2, r2
 8002b3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b3c:	415b      	adcs	r3, r3
 8002b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b44:	4641      	mov	r1, r8
 8002b46:	eb12 0a01 	adds.w	sl, r2, r1
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	eb43 0b01 	adc.w	fp, r3, r1
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b64:	4692      	mov	sl, r2
 8002b66:	469b      	mov	fp, r3
 8002b68:	4643      	mov	r3, r8
 8002b6a:	eb1a 0303 	adds.w	r3, sl, r3
 8002b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b72:	464b      	mov	r3, r9
 8002b74:	eb4b 0303 	adc.w	r3, fp, r3
 8002b78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b90:	460b      	mov	r3, r1
 8002b92:	18db      	adds	r3, r3, r3
 8002b94:	643b      	str	r3, [r7, #64]	; 0x40
 8002b96:	4613      	mov	r3, r2
 8002b98:	eb42 0303 	adc.w	r3, r2, r3
 8002b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ba2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ba6:	f7fd fb8b 	bl	80002c0 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <UART_SetConfig+0x2d4>)
 8002bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2264      	movs	r2, #100	; 0x64
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	1acb      	subs	r3, r1, r3
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bc6:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <UART_SetConfig+0x2d4>)
 8002bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bd4:	441c      	add	r4, r3
 8002bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002be0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002be4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002be8:	4642      	mov	r2, r8
 8002bea:	464b      	mov	r3, r9
 8002bec:	1891      	adds	r1, r2, r2
 8002bee:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bf0:	415b      	adcs	r3, r3
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	1851      	adds	r1, r2, r1
 8002bfc:	6339      	str	r1, [r7, #48]	; 0x30
 8002bfe:	4649      	mov	r1, r9
 8002c00:	414b      	adcs	r3, r1
 8002c02:	637b      	str	r3, [r7, #52]	; 0x34
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c10:	4659      	mov	r1, fp
 8002c12:	00cb      	lsls	r3, r1, #3
 8002c14:	4651      	mov	r1, sl
 8002c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c1a:	4651      	mov	r1, sl
 8002c1c:	00ca      	lsls	r2, r1, #3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	4642      	mov	r2, r8
 8002c26:	189b      	adds	r3, r3, r2
 8002c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c2c:	464b      	mov	r3, r9
 8002c2e:	460a      	mov	r2, r1
 8002c30:	eb42 0303 	adc.w	r3, r2, r3
 8002c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	18db      	adds	r3, r3, r3
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c52:	4613      	mov	r3, r2
 8002c54:	eb42 0303 	adc.w	r3, r2, r3
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c62:	f7fd fb2d 	bl	80002c0 <__aeabi_uldivmod>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <UART_SetConfig+0x2d4>)
 8002c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	2164      	movs	r1, #100	; 0x64
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	3332      	adds	r3, #50	; 0x32
 8002c7e:	4a08      	ldr	r2, [pc, #32]	; (8002ca0 <UART_SetConfig+0x2d4>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	f003 0207 	and.w	r2, r3, #7
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4422      	add	r2, r4
 8002c92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c94:	e106      	b.n	8002ea4 <UART_SetConfig+0x4d8>
 8002c96:	bf00      	nop
 8002c98:	40011000 	.word	0x40011000
 8002c9c:	40011400 	.word	0x40011400
 8002ca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cb6:	4642      	mov	r2, r8
 8002cb8:	464b      	mov	r3, r9
 8002cba:	1891      	adds	r1, r2, r2
 8002cbc:	6239      	str	r1, [r7, #32]
 8002cbe:	415b      	adcs	r3, r3
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cc6:	4641      	mov	r1, r8
 8002cc8:	1854      	adds	r4, r2, r1
 8002cca:	4649      	mov	r1, r9
 8002ccc:	eb43 0501 	adc.w	r5, r3, r1
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	00eb      	lsls	r3, r5, #3
 8002cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cde:	00e2      	lsls	r2, r4, #3
 8002ce0:	4614      	mov	r4, r2
 8002ce2:	461d      	mov	r5, r3
 8002ce4:	4643      	mov	r3, r8
 8002ce6:	18e3      	adds	r3, r4, r3
 8002ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cec:	464b      	mov	r3, r9
 8002cee:	eb45 0303 	adc.w	r3, r5, r3
 8002cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d12:	4629      	mov	r1, r5
 8002d14:	008b      	lsls	r3, r1, #2
 8002d16:	4621      	mov	r1, r4
 8002d18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	008a      	lsls	r2, r1, #2
 8002d20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d24:	f7fd facc 	bl	80002c0 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4b60      	ldr	r3, [pc, #384]	; (8002eb0 <UART_SetConfig+0x4e4>)
 8002d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	011c      	lsls	r4, r3, #4
 8002d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d48:	4642      	mov	r2, r8
 8002d4a:	464b      	mov	r3, r9
 8002d4c:	1891      	adds	r1, r2, r2
 8002d4e:	61b9      	str	r1, [r7, #24]
 8002d50:	415b      	adcs	r3, r3
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d58:	4641      	mov	r1, r8
 8002d5a:	1851      	adds	r1, r2, r1
 8002d5c:	6139      	str	r1, [r7, #16]
 8002d5e:	4649      	mov	r1, r9
 8002d60:	414b      	adcs	r3, r1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d70:	4659      	mov	r1, fp
 8002d72:	00cb      	lsls	r3, r1, #3
 8002d74:	4651      	mov	r1, sl
 8002d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	00ca      	lsls	r2, r1, #3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	4642      	mov	r2, r8
 8002d86:	189b      	adds	r3, r3, r2
 8002d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d8c:	464b      	mov	r3, r9
 8002d8e:	460a      	mov	r2, r1
 8002d90:	eb42 0303 	adc.w	r3, r2, r3
 8002d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002da2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002db0:	4649      	mov	r1, r9
 8002db2:	008b      	lsls	r3, r1, #2
 8002db4:	4641      	mov	r1, r8
 8002db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dba:	4641      	mov	r1, r8
 8002dbc:	008a      	lsls	r2, r1, #2
 8002dbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dc2:	f7fd fa7d 	bl	80002c0 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <UART_SetConfig+0x4e4>)
 8002dce:	fba3 2301 	umull	r2, r3, r3, r1
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2264      	movs	r2, #100	; 0x64
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	1acb      	subs	r3, r1, r3
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	3332      	adds	r3, #50	; 0x32
 8002de0:	4a33      	ldr	r2, [pc, #204]	; (8002eb0 <UART_SetConfig+0x4e4>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dec:	441c      	add	r4, r3
 8002dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df2:	2200      	movs	r2, #0
 8002df4:	673b      	str	r3, [r7, #112]	; 0x70
 8002df6:	677a      	str	r2, [r7, #116]	; 0x74
 8002df8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	1891      	adds	r1, r2, r2
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	415b      	adcs	r3, r3
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	1851      	adds	r1, r2, r1
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	4649      	mov	r1, r9
 8002e14:	414b      	adcs	r3, r1
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e24:	4659      	mov	r1, fp
 8002e26:	00cb      	lsls	r3, r1, #3
 8002e28:	4651      	mov	r1, sl
 8002e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e2e:	4651      	mov	r1, sl
 8002e30:	00ca      	lsls	r2, r1, #3
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	4642      	mov	r2, r8
 8002e3a:	189b      	adds	r3, r3, r2
 8002e3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e3e:	464b      	mov	r3, r9
 8002e40:	460a      	mov	r2, r1
 8002e42:	eb42 0303 	adc.w	r3, r2, r3
 8002e46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	663b      	str	r3, [r7, #96]	; 0x60
 8002e52:	667a      	str	r2, [r7, #100]	; 0x64
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e60:	4649      	mov	r1, r9
 8002e62:	008b      	lsls	r3, r1, #2
 8002e64:	4641      	mov	r1, r8
 8002e66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e6a:	4641      	mov	r1, r8
 8002e6c:	008a      	lsls	r2, r1, #2
 8002e6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e72:	f7fd fa25 	bl	80002c0 <__aeabi_uldivmod>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <UART_SetConfig+0x4e4>)
 8002e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	2164      	movs	r1, #100	; 0x64
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	3332      	adds	r3, #50	; 0x32
 8002e8e:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <UART_SetConfig+0x4e4>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4422      	add	r2, r4
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	bf00      	nop
 8002ea6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb0:	51eb851f 	.word	0x51eb851f

08002eb4 <std>:
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	b510      	push	{r4, lr}
 8002eb8:	4604      	mov	r4, r0
 8002eba:	e9c0 3300 	strd	r3, r3, [r0]
 8002ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ec2:	6083      	str	r3, [r0, #8]
 8002ec4:	8181      	strh	r1, [r0, #12]
 8002ec6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ec8:	81c2      	strh	r2, [r0, #14]
 8002eca:	6183      	str	r3, [r0, #24]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	2208      	movs	r2, #8
 8002ed0:	305c      	adds	r0, #92	; 0x5c
 8002ed2:	f000 f9f7 	bl	80032c4 <memset>
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <std+0x58>)
 8002ed8:	6263      	str	r3, [r4, #36]	; 0x24
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <std+0x5c>)
 8002edc:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <std+0x60>)
 8002ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <std+0x64>)
 8002ee4:	6323      	str	r3, [r4, #48]	; 0x30
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <std+0x68>)
 8002ee8:	6224      	str	r4, [r4, #32]
 8002eea:	429c      	cmp	r4, r3
 8002eec:	d006      	beq.n	8002efc <std+0x48>
 8002eee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002ef2:	4294      	cmp	r4, r2
 8002ef4:	d002      	beq.n	8002efc <std+0x48>
 8002ef6:	33d0      	adds	r3, #208	; 0xd0
 8002ef8:	429c      	cmp	r4, r3
 8002efa:	d105      	bne.n	8002f08 <std+0x54>
 8002efc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f04:	f000 ba56 	b.w	80033b4 <__retarget_lock_init_recursive>
 8002f08:	bd10      	pop	{r4, pc}
 8002f0a:	bf00      	nop
 8002f0c:	08003115 	.word	0x08003115
 8002f10:	08003137 	.word	0x08003137
 8002f14:	0800316f 	.word	0x0800316f
 8002f18:	08003193 	.word	0x08003193
 8002f1c:	200002cc 	.word	0x200002cc

08002f20 <stdio_exit_handler>:
 8002f20:	4a02      	ldr	r2, [pc, #8]	; (8002f2c <stdio_exit_handler+0xc>)
 8002f22:	4903      	ldr	r1, [pc, #12]	; (8002f30 <stdio_exit_handler+0x10>)
 8002f24:	4803      	ldr	r0, [pc, #12]	; (8002f34 <stdio_exit_handler+0x14>)
 8002f26:	f000 b869 	b.w	8002ffc <_fwalk_sglue>
 8002f2a:	bf00      	nop
 8002f2c:	2000000c 	.word	0x2000000c
 8002f30:	08003c61 	.word	0x08003c61
 8002f34:	20000018 	.word	0x20000018

08002f38 <cleanup_stdio>:
 8002f38:	6841      	ldr	r1, [r0, #4]
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <cleanup_stdio+0x34>)
 8002f3c:	4299      	cmp	r1, r3
 8002f3e:	b510      	push	{r4, lr}
 8002f40:	4604      	mov	r4, r0
 8002f42:	d001      	beq.n	8002f48 <cleanup_stdio+0x10>
 8002f44:	f000 fe8c 	bl	8003c60 <_fflush_r>
 8002f48:	68a1      	ldr	r1, [r4, #8]
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <cleanup_stdio+0x38>)
 8002f4c:	4299      	cmp	r1, r3
 8002f4e:	d002      	beq.n	8002f56 <cleanup_stdio+0x1e>
 8002f50:	4620      	mov	r0, r4
 8002f52:	f000 fe85 	bl	8003c60 <_fflush_r>
 8002f56:	68e1      	ldr	r1, [r4, #12]
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <cleanup_stdio+0x3c>)
 8002f5a:	4299      	cmp	r1, r3
 8002f5c:	d004      	beq.n	8002f68 <cleanup_stdio+0x30>
 8002f5e:	4620      	mov	r0, r4
 8002f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f64:	f000 be7c 	b.w	8003c60 <_fflush_r>
 8002f68:	bd10      	pop	{r4, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200002cc 	.word	0x200002cc
 8002f70:	20000334 	.word	0x20000334
 8002f74:	2000039c 	.word	0x2000039c

08002f78 <global_stdio_init.part.0>:
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <global_stdio_init.part.0+0x30>)
 8002f7c:	4c0b      	ldr	r4, [pc, #44]	; (8002fac <global_stdio_init.part.0+0x34>)
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <global_stdio_init.part.0+0x38>)
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	4620      	mov	r0, r4
 8002f84:	2200      	movs	r2, #0
 8002f86:	2104      	movs	r1, #4
 8002f88:	f7ff ff94 	bl	8002eb4 <std>
 8002f8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002f90:	2201      	movs	r2, #1
 8002f92:	2109      	movs	r1, #9
 8002f94:	f7ff ff8e 	bl	8002eb4 <std>
 8002f98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fa2:	2112      	movs	r1, #18
 8002fa4:	f7ff bf86 	b.w	8002eb4 <std>
 8002fa8:	20000404 	.word	0x20000404
 8002fac:	200002cc 	.word	0x200002cc
 8002fb0:	08002f21 	.word	0x08002f21

08002fb4 <__sfp_lock_acquire>:
 8002fb4:	4801      	ldr	r0, [pc, #4]	; (8002fbc <__sfp_lock_acquire+0x8>)
 8002fb6:	f000 b9fe 	b.w	80033b6 <__retarget_lock_acquire_recursive>
 8002fba:	bf00      	nop
 8002fbc:	2000040d 	.word	0x2000040d

08002fc0 <__sfp_lock_release>:
 8002fc0:	4801      	ldr	r0, [pc, #4]	; (8002fc8 <__sfp_lock_release+0x8>)
 8002fc2:	f000 b9f9 	b.w	80033b8 <__retarget_lock_release_recursive>
 8002fc6:	bf00      	nop
 8002fc8:	2000040d 	.word	0x2000040d

08002fcc <__sinit>:
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	4604      	mov	r4, r0
 8002fd0:	f7ff fff0 	bl	8002fb4 <__sfp_lock_acquire>
 8002fd4:	6a23      	ldr	r3, [r4, #32]
 8002fd6:	b11b      	cbz	r3, 8002fe0 <__sinit+0x14>
 8002fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fdc:	f7ff bff0 	b.w	8002fc0 <__sfp_lock_release>
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <__sinit+0x28>)
 8002fe2:	6223      	str	r3, [r4, #32]
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <__sinit+0x2c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f5      	bne.n	8002fd8 <__sinit+0xc>
 8002fec:	f7ff ffc4 	bl	8002f78 <global_stdio_init.part.0>
 8002ff0:	e7f2      	b.n	8002fd8 <__sinit+0xc>
 8002ff2:	bf00      	nop
 8002ff4:	08002f39 	.word	0x08002f39
 8002ff8:	20000404 	.word	0x20000404

08002ffc <_fwalk_sglue>:
 8002ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003000:	4607      	mov	r7, r0
 8003002:	4688      	mov	r8, r1
 8003004:	4614      	mov	r4, r2
 8003006:	2600      	movs	r6, #0
 8003008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800300c:	f1b9 0901 	subs.w	r9, r9, #1
 8003010:	d505      	bpl.n	800301e <_fwalk_sglue+0x22>
 8003012:	6824      	ldr	r4, [r4, #0]
 8003014:	2c00      	cmp	r4, #0
 8003016:	d1f7      	bne.n	8003008 <_fwalk_sglue+0xc>
 8003018:	4630      	mov	r0, r6
 800301a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800301e:	89ab      	ldrh	r3, [r5, #12]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d907      	bls.n	8003034 <_fwalk_sglue+0x38>
 8003024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003028:	3301      	adds	r3, #1
 800302a:	d003      	beq.n	8003034 <_fwalk_sglue+0x38>
 800302c:	4629      	mov	r1, r5
 800302e:	4638      	mov	r0, r7
 8003030:	47c0      	blx	r8
 8003032:	4306      	orrs	r6, r0
 8003034:	3568      	adds	r5, #104	; 0x68
 8003036:	e7e9      	b.n	800300c <_fwalk_sglue+0x10>

08003038 <iprintf>:
 8003038:	b40f      	push	{r0, r1, r2, r3}
 800303a:	b507      	push	{r0, r1, r2, lr}
 800303c:	4906      	ldr	r1, [pc, #24]	; (8003058 <iprintf+0x20>)
 800303e:	ab04      	add	r3, sp, #16
 8003040:	6808      	ldr	r0, [r1, #0]
 8003042:	f853 2b04 	ldr.w	r2, [r3], #4
 8003046:	6881      	ldr	r1, [r0, #8]
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	f000 fad9 	bl	8003600 <_vfiprintf_r>
 800304e:	b003      	add	sp, #12
 8003050:	f85d eb04 	ldr.w	lr, [sp], #4
 8003054:	b004      	add	sp, #16
 8003056:	4770      	bx	lr
 8003058:	20000064 	.word	0x20000064

0800305c <_puts_r>:
 800305c:	6a03      	ldr	r3, [r0, #32]
 800305e:	b570      	push	{r4, r5, r6, lr}
 8003060:	6884      	ldr	r4, [r0, #8]
 8003062:	4605      	mov	r5, r0
 8003064:	460e      	mov	r6, r1
 8003066:	b90b      	cbnz	r3, 800306c <_puts_r+0x10>
 8003068:	f7ff ffb0 	bl	8002fcc <__sinit>
 800306c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800306e:	07db      	lsls	r3, r3, #31
 8003070:	d405      	bmi.n	800307e <_puts_r+0x22>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	0598      	lsls	r0, r3, #22
 8003076:	d402      	bmi.n	800307e <_puts_r+0x22>
 8003078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800307a:	f000 f99c 	bl	80033b6 <__retarget_lock_acquire_recursive>
 800307e:	89a3      	ldrh	r3, [r4, #12]
 8003080:	0719      	lsls	r1, r3, #28
 8003082:	d513      	bpl.n	80030ac <_puts_r+0x50>
 8003084:	6923      	ldr	r3, [r4, #16]
 8003086:	b18b      	cbz	r3, 80030ac <_puts_r+0x50>
 8003088:	3e01      	subs	r6, #1
 800308a:	68a3      	ldr	r3, [r4, #8]
 800308c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003090:	3b01      	subs	r3, #1
 8003092:	60a3      	str	r3, [r4, #8]
 8003094:	b9e9      	cbnz	r1, 80030d2 <_puts_r+0x76>
 8003096:	2b00      	cmp	r3, #0
 8003098:	da2e      	bge.n	80030f8 <_puts_r+0x9c>
 800309a:	4622      	mov	r2, r4
 800309c:	210a      	movs	r1, #10
 800309e:	4628      	mov	r0, r5
 80030a0:	f000 f87b 	bl	800319a <__swbuf_r>
 80030a4:	3001      	adds	r0, #1
 80030a6:	d007      	beq.n	80030b8 <_puts_r+0x5c>
 80030a8:	250a      	movs	r5, #10
 80030aa:	e007      	b.n	80030bc <_puts_r+0x60>
 80030ac:	4621      	mov	r1, r4
 80030ae:	4628      	mov	r0, r5
 80030b0:	f000 f8b0 	bl	8003214 <__swsetup_r>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d0e7      	beq.n	8003088 <_puts_r+0x2c>
 80030b8:	f04f 35ff 	mov.w	r5, #4294967295
 80030bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030be:	07da      	lsls	r2, r3, #31
 80030c0:	d405      	bmi.n	80030ce <_puts_r+0x72>
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	059b      	lsls	r3, r3, #22
 80030c6:	d402      	bmi.n	80030ce <_puts_r+0x72>
 80030c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ca:	f000 f975 	bl	80033b8 <__retarget_lock_release_recursive>
 80030ce:	4628      	mov	r0, r5
 80030d0:	bd70      	pop	{r4, r5, r6, pc}
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	da04      	bge.n	80030e0 <_puts_r+0x84>
 80030d6:	69a2      	ldr	r2, [r4, #24]
 80030d8:	429a      	cmp	r2, r3
 80030da:	dc06      	bgt.n	80030ea <_puts_r+0x8e>
 80030dc:	290a      	cmp	r1, #10
 80030de:	d004      	beq.n	80030ea <_puts_r+0x8e>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	6022      	str	r2, [r4, #0]
 80030e6:	7019      	strb	r1, [r3, #0]
 80030e8:	e7cf      	b.n	800308a <_puts_r+0x2e>
 80030ea:	4622      	mov	r2, r4
 80030ec:	4628      	mov	r0, r5
 80030ee:	f000 f854 	bl	800319a <__swbuf_r>
 80030f2:	3001      	adds	r0, #1
 80030f4:	d1c9      	bne.n	800308a <_puts_r+0x2e>
 80030f6:	e7df      	b.n	80030b8 <_puts_r+0x5c>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	250a      	movs	r5, #10
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	6022      	str	r2, [r4, #0]
 8003100:	701d      	strb	r5, [r3, #0]
 8003102:	e7db      	b.n	80030bc <_puts_r+0x60>

08003104 <puts>:
 8003104:	4b02      	ldr	r3, [pc, #8]	; (8003110 <puts+0xc>)
 8003106:	4601      	mov	r1, r0
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	f7ff bfa7 	b.w	800305c <_puts_r>
 800310e:	bf00      	nop
 8003110:	20000064 	.word	0x20000064

08003114 <__sread>:
 8003114:	b510      	push	{r4, lr}
 8003116:	460c      	mov	r4, r1
 8003118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800311c:	f000 f8fc 	bl	8003318 <_read_r>
 8003120:	2800      	cmp	r0, #0
 8003122:	bfab      	itete	ge
 8003124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003126:	89a3      	ldrhlt	r3, [r4, #12]
 8003128:	181b      	addge	r3, r3, r0
 800312a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800312e:	bfac      	ite	ge
 8003130:	6563      	strge	r3, [r4, #84]	; 0x54
 8003132:	81a3      	strhlt	r3, [r4, #12]
 8003134:	bd10      	pop	{r4, pc}

08003136 <__swrite>:
 8003136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800313a:	461f      	mov	r7, r3
 800313c:	898b      	ldrh	r3, [r1, #12]
 800313e:	05db      	lsls	r3, r3, #23
 8003140:	4605      	mov	r5, r0
 8003142:	460c      	mov	r4, r1
 8003144:	4616      	mov	r6, r2
 8003146:	d505      	bpl.n	8003154 <__swrite+0x1e>
 8003148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800314c:	2302      	movs	r3, #2
 800314e:	2200      	movs	r2, #0
 8003150:	f000 f8d0 	bl	80032f4 <_lseek_r>
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800315a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	4632      	mov	r2, r6
 8003162:	463b      	mov	r3, r7
 8003164:	4628      	mov	r0, r5
 8003166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800316a:	f000 b8e7 	b.w	800333c <_write_r>

0800316e <__sseek>:
 800316e:	b510      	push	{r4, lr}
 8003170:	460c      	mov	r4, r1
 8003172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003176:	f000 f8bd 	bl	80032f4 <_lseek_r>
 800317a:	1c43      	adds	r3, r0, #1
 800317c:	89a3      	ldrh	r3, [r4, #12]
 800317e:	bf15      	itete	ne
 8003180:	6560      	strne	r0, [r4, #84]	; 0x54
 8003182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800318a:	81a3      	strheq	r3, [r4, #12]
 800318c:	bf18      	it	ne
 800318e:	81a3      	strhne	r3, [r4, #12]
 8003190:	bd10      	pop	{r4, pc}

08003192 <__sclose>:
 8003192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003196:	f000 b89d 	b.w	80032d4 <_close_r>

0800319a <__swbuf_r>:
 800319a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319c:	460e      	mov	r6, r1
 800319e:	4614      	mov	r4, r2
 80031a0:	4605      	mov	r5, r0
 80031a2:	b118      	cbz	r0, 80031ac <__swbuf_r+0x12>
 80031a4:	6a03      	ldr	r3, [r0, #32]
 80031a6:	b90b      	cbnz	r3, 80031ac <__swbuf_r+0x12>
 80031a8:	f7ff ff10 	bl	8002fcc <__sinit>
 80031ac:	69a3      	ldr	r3, [r4, #24]
 80031ae:	60a3      	str	r3, [r4, #8]
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	071a      	lsls	r2, r3, #28
 80031b4:	d525      	bpl.n	8003202 <__swbuf_r+0x68>
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	b31b      	cbz	r3, 8003202 <__swbuf_r+0x68>
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	6922      	ldr	r2, [r4, #16]
 80031be:	1a98      	subs	r0, r3, r2
 80031c0:	6963      	ldr	r3, [r4, #20]
 80031c2:	b2f6      	uxtb	r6, r6
 80031c4:	4283      	cmp	r3, r0
 80031c6:	4637      	mov	r7, r6
 80031c8:	dc04      	bgt.n	80031d4 <__swbuf_r+0x3a>
 80031ca:	4621      	mov	r1, r4
 80031cc:	4628      	mov	r0, r5
 80031ce:	f000 fd47 	bl	8003c60 <_fflush_r>
 80031d2:	b9e0      	cbnz	r0, 800320e <__swbuf_r+0x74>
 80031d4:	68a3      	ldr	r3, [r4, #8]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	60a3      	str	r3, [r4, #8]
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	6022      	str	r2, [r4, #0]
 80031e0:	701e      	strb	r6, [r3, #0]
 80031e2:	6962      	ldr	r2, [r4, #20]
 80031e4:	1c43      	adds	r3, r0, #1
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d004      	beq.n	80031f4 <__swbuf_r+0x5a>
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	07db      	lsls	r3, r3, #31
 80031ee:	d506      	bpl.n	80031fe <__swbuf_r+0x64>
 80031f0:	2e0a      	cmp	r6, #10
 80031f2:	d104      	bne.n	80031fe <__swbuf_r+0x64>
 80031f4:	4621      	mov	r1, r4
 80031f6:	4628      	mov	r0, r5
 80031f8:	f000 fd32 	bl	8003c60 <_fflush_r>
 80031fc:	b938      	cbnz	r0, 800320e <__swbuf_r+0x74>
 80031fe:	4638      	mov	r0, r7
 8003200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003202:	4621      	mov	r1, r4
 8003204:	4628      	mov	r0, r5
 8003206:	f000 f805 	bl	8003214 <__swsetup_r>
 800320a:	2800      	cmp	r0, #0
 800320c:	d0d5      	beq.n	80031ba <__swbuf_r+0x20>
 800320e:	f04f 37ff 	mov.w	r7, #4294967295
 8003212:	e7f4      	b.n	80031fe <__swbuf_r+0x64>

08003214 <__swsetup_r>:
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <__swsetup_r+0xac>)
 8003218:	4605      	mov	r5, r0
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	460c      	mov	r4, r1
 800321e:	b118      	cbz	r0, 8003228 <__swsetup_r+0x14>
 8003220:	6a03      	ldr	r3, [r0, #32]
 8003222:	b90b      	cbnz	r3, 8003228 <__swsetup_r+0x14>
 8003224:	f7ff fed2 	bl	8002fcc <__sinit>
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800322e:	0718      	lsls	r0, r3, #28
 8003230:	d422      	bmi.n	8003278 <__swsetup_r+0x64>
 8003232:	06d9      	lsls	r1, r3, #27
 8003234:	d407      	bmi.n	8003246 <__swsetup_r+0x32>
 8003236:	2309      	movs	r3, #9
 8003238:	602b      	str	r3, [r5, #0]
 800323a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800323e:	81a3      	strh	r3, [r4, #12]
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	e034      	b.n	80032b0 <__swsetup_r+0x9c>
 8003246:	0758      	lsls	r0, r3, #29
 8003248:	d512      	bpl.n	8003270 <__swsetup_r+0x5c>
 800324a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800324c:	b141      	cbz	r1, 8003260 <__swsetup_r+0x4c>
 800324e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003252:	4299      	cmp	r1, r3
 8003254:	d002      	beq.n	800325c <__swsetup_r+0x48>
 8003256:	4628      	mov	r0, r5
 8003258:	f000 f8b0 	bl	80033bc <_free_r>
 800325c:	2300      	movs	r3, #0
 800325e:	6363      	str	r3, [r4, #52]	; 0x34
 8003260:	89a3      	ldrh	r3, [r4, #12]
 8003262:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003266:	81a3      	strh	r3, [r4, #12]
 8003268:	2300      	movs	r3, #0
 800326a:	6063      	str	r3, [r4, #4]
 800326c:	6923      	ldr	r3, [r4, #16]
 800326e:	6023      	str	r3, [r4, #0]
 8003270:	89a3      	ldrh	r3, [r4, #12]
 8003272:	f043 0308 	orr.w	r3, r3, #8
 8003276:	81a3      	strh	r3, [r4, #12]
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	b94b      	cbnz	r3, 8003290 <__swsetup_r+0x7c>
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003286:	d003      	beq.n	8003290 <__swsetup_r+0x7c>
 8003288:	4621      	mov	r1, r4
 800328a:	4628      	mov	r0, r5
 800328c:	f000 fd36 	bl	8003cfc <__smakebuf_r>
 8003290:	89a0      	ldrh	r0, [r4, #12]
 8003292:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003296:	f010 0301 	ands.w	r3, r0, #1
 800329a:	d00a      	beq.n	80032b2 <__swsetup_r+0x9e>
 800329c:	2300      	movs	r3, #0
 800329e:	60a3      	str	r3, [r4, #8]
 80032a0:	6963      	ldr	r3, [r4, #20]
 80032a2:	425b      	negs	r3, r3
 80032a4:	61a3      	str	r3, [r4, #24]
 80032a6:	6923      	ldr	r3, [r4, #16]
 80032a8:	b943      	cbnz	r3, 80032bc <__swsetup_r+0xa8>
 80032aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032ae:	d1c4      	bne.n	800323a <__swsetup_r+0x26>
 80032b0:	bd38      	pop	{r3, r4, r5, pc}
 80032b2:	0781      	lsls	r1, r0, #30
 80032b4:	bf58      	it	pl
 80032b6:	6963      	ldrpl	r3, [r4, #20]
 80032b8:	60a3      	str	r3, [r4, #8]
 80032ba:	e7f4      	b.n	80032a6 <__swsetup_r+0x92>
 80032bc:	2000      	movs	r0, #0
 80032be:	e7f7      	b.n	80032b0 <__swsetup_r+0x9c>
 80032c0:	20000064 	.word	0x20000064

080032c4 <memset>:
 80032c4:	4402      	add	r2, r0
 80032c6:	4603      	mov	r3, r0
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d100      	bne.n	80032ce <memset+0xa>
 80032cc:	4770      	bx	lr
 80032ce:	f803 1b01 	strb.w	r1, [r3], #1
 80032d2:	e7f9      	b.n	80032c8 <memset+0x4>

080032d4 <_close_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4d06      	ldr	r5, [pc, #24]	; (80032f0 <_close_r+0x1c>)
 80032d8:	2300      	movs	r3, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	602b      	str	r3, [r5, #0]
 80032e0:	f7fe f8d5 	bl	800148e <_close>
 80032e4:	1c43      	adds	r3, r0, #1
 80032e6:	d102      	bne.n	80032ee <_close_r+0x1a>
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	b103      	cbz	r3, 80032ee <_close_r+0x1a>
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	20000408 	.word	0x20000408

080032f4 <_lseek_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	4d07      	ldr	r5, [pc, #28]	; (8003314 <_lseek_r+0x20>)
 80032f8:	4604      	mov	r4, r0
 80032fa:	4608      	mov	r0, r1
 80032fc:	4611      	mov	r1, r2
 80032fe:	2200      	movs	r2, #0
 8003300:	602a      	str	r2, [r5, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	f7fe f8ea 	bl	80014dc <_lseek>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_lseek_r+0x1e>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	b103      	cbz	r3, 8003312 <_lseek_r+0x1e>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	20000408 	.word	0x20000408

08003318 <_read_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4d07      	ldr	r5, [pc, #28]	; (8003338 <_read_r+0x20>)
 800331c:	4604      	mov	r4, r0
 800331e:	4608      	mov	r0, r1
 8003320:	4611      	mov	r1, r2
 8003322:	2200      	movs	r2, #0
 8003324:	602a      	str	r2, [r5, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	f7fe f878 	bl	800141c <_read>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d102      	bne.n	8003336 <_read_r+0x1e>
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	b103      	cbz	r3, 8003336 <_read_r+0x1e>
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	20000408 	.word	0x20000408

0800333c <_write_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4d07      	ldr	r5, [pc, #28]	; (800335c <_write_r+0x20>)
 8003340:	4604      	mov	r4, r0
 8003342:	4608      	mov	r0, r1
 8003344:	4611      	mov	r1, r2
 8003346:	2200      	movs	r2, #0
 8003348:	602a      	str	r2, [r5, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f7fe f883 	bl	8001456 <_write>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_write_r+0x1e>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_write_r+0x1e>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	20000408 	.word	0x20000408

08003360 <__errno>:
 8003360:	4b01      	ldr	r3, [pc, #4]	; (8003368 <__errno+0x8>)
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000064 	.word	0x20000064

0800336c <__libc_init_array>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	4d0d      	ldr	r5, [pc, #52]	; (80033a4 <__libc_init_array+0x38>)
 8003370:	4c0d      	ldr	r4, [pc, #52]	; (80033a8 <__libc_init_array+0x3c>)
 8003372:	1b64      	subs	r4, r4, r5
 8003374:	10a4      	asrs	r4, r4, #2
 8003376:	2600      	movs	r6, #0
 8003378:	42a6      	cmp	r6, r4
 800337a:	d109      	bne.n	8003390 <__libc_init_array+0x24>
 800337c:	4d0b      	ldr	r5, [pc, #44]	; (80033ac <__libc_init_array+0x40>)
 800337e:	4c0c      	ldr	r4, [pc, #48]	; (80033b0 <__libc_init_array+0x44>)
 8003380:	f000 fd2a 	bl	8003dd8 <_init>
 8003384:	1b64      	subs	r4, r4, r5
 8003386:	10a4      	asrs	r4, r4, #2
 8003388:	2600      	movs	r6, #0
 800338a:	42a6      	cmp	r6, r4
 800338c:	d105      	bne.n	800339a <__libc_init_array+0x2e>
 800338e:	bd70      	pop	{r4, r5, r6, pc}
 8003390:	f855 3b04 	ldr.w	r3, [r5], #4
 8003394:	4798      	blx	r3
 8003396:	3601      	adds	r6, #1
 8003398:	e7ee      	b.n	8003378 <__libc_init_array+0xc>
 800339a:	f855 3b04 	ldr.w	r3, [r5], #4
 800339e:	4798      	blx	r3
 80033a0:	3601      	adds	r6, #1
 80033a2:	e7f2      	b.n	800338a <__libc_init_array+0x1e>
 80033a4:	08003eac 	.word	0x08003eac
 80033a8:	08003eac 	.word	0x08003eac
 80033ac:	08003eac 	.word	0x08003eac
 80033b0:	08003eb0 	.word	0x08003eb0

080033b4 <__retarget_lock_init_recursive>:
 80033b4:	4770      	bx	lr

080033b6 <__retarget_lock_acquire_recursive>:
 80033b6:	4770      	bx	lr

080033b8 <__retarget_lock_release_recursive>:
 80033b8:	4770      	bx	lr
	...

080033bc <_free_r>:
 80033bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033be:	2900      	cmp	r1, #0
 80033c0:	d044      	beq.n	800344c <_free_r+0x90>
 80033c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c6:	9001      	str	r0, [sp, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f1a1 0404 	sub.w	r4, r1, #4
 80033ce:	bfb8      	it	lt
 80033d0:	18e4      	addlt	r4, r4, r3
 80033d2:	f000 f8df 	bl	8003594 <__malloc_lock>
 80033d6:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <_free_r+0x94>)
 80033d8:	9801      	ldr	r0, [sp, #4]
 80033da:	6813      	ldr	r3, [r2, #0]
 80033dc:	b933      	cbnz	r3, 80033ec <_free_r+0x30>
 80033de:	6063      	str	r3, [r4, #4]
 80033e0:	6014      	str	r4, [r2, #0]
 80033e2:	b003      	add	sp, #12
 80033e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033e8:	f000 b8da 	b.w	80035a0 <__malloc_unlock>
 80033ec:	42a3      	cmp	r3, r4
 80033ee:	d908      	bls.n	8003402 <_free_r+0x46>
 80033f0:	6825      	ldr	r5, [r4, #0]
 80033f2:	1961      	adds	r1, r4, r5
 80033f4:	428b      	cmp	r3, r1
 80033f6:	bf01      	itttt	eq
 80033f8:	6819      	ldreq	r1, [r3, #0]
 80033fa:	685b      	ldreq	r3, [r3, #4]
 80033fc:	1949      	addeq	r1, r1, r5
 80033fe:	6021      	streq	r1, [r4, #0]
 8003400:	e7ed      	b.n	80033de <_free_r+0x22>
 8003402:	461a      	mov	r2, r3
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b10b      	cbz	r3, 800340c <_free_r+0x50>
 8003408:	42a3      	cmp	r3, r4
 800340a:	d9fa      	bls.n	8003402 <_free_r+0x46>
 800340c:	6811      	ldr	r1, [r2, #0]
 800340e:	1855      	adds	r5, r2, r1
 8003410:	42a5      	cmp	r5, r4
 8003412:	d10b      	bne.n	800342c <_free_r+0x70>
 8003414:	6824      	ldr	r4, [r4, #0]
 8003416:	4421      	add	r1, r4
 8003418:	1854      	adds	r4, r2, r1
 800341a:	42a3      	cmp	r3, r4
 800341c:	6011      	str	r1, [r2, #0]
 800341e:	d1e0      	bne.n	80033e2 <_free_r+0x26>
 8003420:	681c      	ldr	r4, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	6053      	str	r3, [r2, #4]
 8003426:	440c      	add	r4, r1
 8003428:	6014      	str	r4, [r2, #0]
 800342a:	e7da      	b.n	80033e2 <_free_r+0x26>
 800342c:	d902      	bls.n	8003434 <_free_r+0x78>
 800342e:	230c      	movs	r3, #12
 8003430:	6003      	str	r3, [r0, #0]
 8003432:	e7d6      	b.n	80033e2 <_free_r+0x26>
 8003434:	6825      	ldr	r5, [r4, #0]
 8003436:	1961      	adds	r1, r4, r5
 8003438:	428b      	cmp	r3, r1
 800343a:	bf04      	itt	eq
 800343c:	6819      	ldreq	r1, [r3, #0]
 800343e:	685b      	ldreq	r3, [r3, #4]
 8003440:	6063      	str	r3, [r4, #4]
 8003442:	bf04      	itt	eq
 8003444:	1949      	addeq	r1, r1, r5
 8003446:	6021      	streq	r1, [r4, #0]
 8003448:	6054      	str	r4, [r2, #4]
 800344a:	e7ca      	b.n	80033e2 <_free_r+0x26>
 800344c:	b003      	add	sp, #12
 800344e:	bd30      	pop	{r4, r5, pc}
 8003450:	20000410 	.word	0x20000410

08003454 <sbrk_aligned>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	4e0e      	ldr	r6, [pc, #56]	; (8003490 <sbrk_aligned+0x3c>)
 8003458:	460c      	mov	r4, r1
 800345a:	6831      	ldr	r1, [r6, #0]
 800345c:	4605      	mov	r5, r0
 800345e:	b911      	cbnz	r1, 8003466 <sbrk_aligned+0x12>
 8003460:	f000 fcaa 	bl	8003db8 <_sbrk_r>
 8003464:	6030      	str	r0, [r6, #0]
 8003466:	4621      	mov	r1, r4
 8003468:	4628      	mov	r0, r5
 800346a:	f000 fca5 	bl	8003db8 <_sbrk_r>
 800346e:	1c43      	adds	r3, r0, #1
 8003470:	d00a      	beq.n	8003488 <sbrk_aligned+0x34>
 8003472:	1cc4      	adds	r4, r0, #3
 8003474:	f024 0403 	bic.w	r4, r4, #3
 8003478:	42a0      	cmp	r0, r4
 800347a:	d007      	beq.n	800348c <sbrk_aligned+0x38>
 800347c:	1a21      	subs	r1, r4, r0
 800347e:	4628      	mov	r0, r5
 8003480:	f000 fc9a 	bl	8003db8 <_sbrk_r>
 8003484:	3001      	adds	r0, #1
 8003486:	d101      	bne.n	800348c <sbrk_aligned+0x38>
 8003488:	f04f 34ff 	mov.w	r4, #4294967295
 800348c:	4620      	mov	r0, r4
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	20000414 	.word	0x20000414

08003494 <_malloc_r>:
 8003494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003498:	1ccd      	adds	r5, r1, #3
 800349a:	f025 0503 	bic.w	r5, r5, #3
 800349e:	3508      	adds	r5, #8
 80034a0:	2d0c      	cmp	r5, #12
 80034a2:	bf38      	it	cc
 80034a4:	250c      	movcc	r5, #12
 80034a6:	2d00      	cmp	r5, #0
 80034a8:	4607      	mov	r7, r0
 80034aa:	db01      	blt.n	80034b0 <_malloc_r+0x1c>
 80034ac:	42a9      	cmp	r1, r5
 80034ae:	d905      	bls.n	80034bc <_malloc_r+0x28>
 80034b0:	230c      	movs	r3, #12
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	2600      	movs	r6, #0
 80034b6:	4630      	mov	r0, r6
 80034b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003590 <_malloc_r+0xfc>
 80034c0:	f000 f868 	bl	8003594 <__malloc_lock>
 80034c4:	f8d8 3000 	ldr.w	r3, [r8]
 80034c8:	461c      	mov	r4, r3
 80034ca:	bb5c      	cbnz	r4, 8003524 <_malloc_r+0x90>
 80034cc:	4629      	mov	r1, r5
 80034ce:	4638      	mov	r0, r7
 80034d0:	f7ff ffc0 	bl	8003454 <sbrk_aligned>
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	4604      	mov	r4, r0
 80034d8:	d155      	bne.n	8003586 <_malloc_r+0xf2>
 80034da:	f8d8 4000 	ldr.w	r4, [r8]
 80034de:	4626      	mov	r6, r4
 80034e0:	2e00      	cmp	r6, #0
 80034e2:	d145      	bne.n	8003570 <_malloc_r+0xdc>
 80034e4:	2c00      	cmp	r4, #0
 80034e6:	d048      	beq.n	800357a <_malloc_r+0xe6>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	4631      	mov	r1, r6
 80034ec:	4638      	mov	r0, r7
 80034ee:	eb04 0903 	add.w	r9, r4, r3
 80034f2:	f000 fc61 	bl	8003db8 <_sbrk_r>
 80034f6:	4581      	cmp	r9, r0
 80034f8:	d13f      	bne.n	800357a <_malloc_r+0xe6>
 80034fa:	6821      	ldr	r1, [r4, #0]
 80034fc:	1a6d      	subs	r5, r5, r1
 80034fe:	4629      	mov	r1, r5
 8003500:	4638      	mov	r0, r7
 8003502:	f7ff ffa7 	bl	8003454 <sbrk_aligned>
 8003506:	3001      	adds	r0, #1
 8003508:	d037      	beq.n	800357a <_malloc_r+0xe6>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	442b      	add	r3, r5
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	f8d8 3000 	ldr.w	r3, [r8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d038      	beq.n	800358a <_malloc_r+0xf6>
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	42a2      	cmp	r2, r4
 800351c:	d12b      	bne.n	8003576 <_malloc_r+0xe2>
 800351e:	2200      	movs	r2, #0
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	e00f      	b.n	8003544 <_malloc_r+0xb0>
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	1b52      	subs	r2, r2, r5
 8003528:	d41f      	bmi.n	800356a <_malloc_r+0xd6>
 800352a:	2a0b      	cmp	r2, #11
 800352c:	d917      	bls.n	800355e <_malloc_r+0xca>
 800352e:	1961      	adds	r1, r4, r5
 8003530:	42a3      	cmp	r3, r4
 8003532:	6025      	str	r5, [r4, #0]
 8003534:	bf18      	it	ne
 8003536:	6059      	strne	r1, [r3, #4]
 8003538:	6863      	ldr	r3, [r4, #4]
 800353a:	bf08      	it	eq
 800353c:	f8c8 1000 	streq.w	r1, [r8]
 8003540:	5162      	str	r2, [r4, r5]
 8003542:	604b      	str	r3, [r1, #4]
 8003544:	4638      	mov	r0, r7
 8003546:	f104 060b 	add.w	r6, r4, #11
 800354a:	f000 f829 	bl	80035a0 <__malloc_unlock>
 800354e:	f026 0607 	bic.w	r6, r6, #7
 8003552:	1d23      	adds	r3, r4, #4
 8003554:	1af2      	subs	r2, r6, r3
 8003556:	d0ae      	beq.n	80034b6 <_malloc_r+0x22>
 8003558:	1b9b      	subs	r3, r3, r6
 800355a:	50a3      	str	r3, [r4, r2]
 800355c:	e7ab      	b.n	80034b6 <_malloc_r+0x22>
 800355e:	42a3      	cmp	r3, r4
 8003560:	6862      	ldr	r2, [r4, #4]
 8003562:	d1dd      	bne.n	8003520 <_malloc_r+0x8c>
 8003564:	f8c8 2000 	str.w	r2, [r8]
 8003568:	e7ec      	b.n	8003544 <_malloc_r+0xb0>
 800356a:	4623      	mov	r3, r4
 800356c:	6864      	ldr	r4, [r4, #4]
 800356e:	e7ac      	b.n	80034ca <_malloc_r+0x36>
 8003570:	4634      	mov	r4, r6
 8003572:	6876      	ldr	r6, [r6, #4]
 8003574:	e7b4      	b.n	80034e0 <_malloc_r+0x4c>
 8003576:	4613      	mov	r3, r2
 8003578:	e7cc      	b.n	8003514 <_malloc_r+0x80>
 800357a:	230c      	movs	r3, #12
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	4638      	mov	r0, r7
 8003580:	f000 f80e 	bl	80035a0 <__malloc_unlock>
 8003584:	e797      	b.n	80034b6 <_malloc_r+0x22>
 8003586:	6025      	str	r5, [r4, #0]
 8003588:	e7dc      	b.n	8003544 <_malloc_r+0xb0>
 800358a:	605b      	str	r3, [r3, #4]
 800358c:	deff      	udf	#255	; 0xff
 800358e:	bf00      	nop
 8003590:	20000410 	.word	0x20000410

08003594 <__malloc_lock>:
 8003594:	4801      	ldr	r0, [pc, #4]	; (800359c <__malloc_lock+0x8>)
 8003596:	f7ff bf0e 	b.w	80033b6 <__retarget_lock_acquire_recursive>
 800359a:	bf00      	nop
 800359c:	2000040c 	.word	0x2000040c

080035a0 <__malloc_unlock>:
 80035a0:	4801      	ldr	r0, [pc, #4]	; (80035a8 <__malloc_unlock+0x8>)
 80035a2:	f7ff bf09 	b.w	80033b8 <__retarget_lock_release_recursive>
 80035a6:	bf00      	nop
 80035a8:	2000040c 	.word	0x2000040c

080035ac <__sfputc_r>:
 80035ac:	6893      	ldr	r3, [r2, #8]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	b410      	push	{r4}
 80035b4:	6093      	str	r3, [r2, #8]
 80035b6:	da08      	bge.n	80035ca <__sfputc_r+0x1e>
 80035b8:	6994      	ldr	r4, [r2, #24]
 80035ba:	42a3      	cmp	r3, r4
 80035bc:	db01      	blt.n	80035c2 <__sfputc_r+0x16>
 80035be:	290a      	cmp	r1, #10
 80035c0:	d103      	bne.n	80035ca <__sfputc_r+0x1e>
 80035c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035c6:	f7ff bde8 	b.w	800319a <__swbuf_r>
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	1c58      	adds	r0, r3, #1
 80035ce:	6010      	str	r0, [r2, #0]
 80035d0:	7019      	strb	r1, [r3, #0]
 80035d2:	4608      	mov	r0, r1
 80035d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035d8:	4770      	bx	lr

080035da <__sfputs_r>:
 80035da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035dc:	4606      	mov	r6, r0
 80035de:	460f      	mov	r7, r1
 80035e0:	4614      	mov	r4, r2
 80035e2:	18d5      	adds	r5, r2, r3
 80035e4:	42ac      	cmp	r4, r5
 80035e6:	d101      	bne.n	80035ec <__sfputs_r+0x12>
 80035e8:	2000      	movs	r0, #0
 80035ea:	e007      	b.n	80035fc <__sfputs_r+0x22>
 80035ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035f0:	463a      	mov	r2, r7
 80035f2:	4630      	mov	r0, r6
 80035f4:	f7ff ffda 	bl	80035ac <__sfputc_r>
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d1f3      	bne.n	80035e4 <__sfputs_r+0xa>
 80035fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003600 <_vfiprintf_r>:
 8003600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003604:	460d      	mov	r5, r1
 8003606:	b09d      	sub	sp, #116	; 0x74
 8003608:	4614      	mov	r4, r2
 800360a:	4698      	mov	r8, r3
 800360c:	4606      	mov	r6, r0
 800360e:	b118      	cbz	r0, 8003618 <_vfiprintf_r+0x18>
 8003610:	6a03      	ldr	r3, [r0, #32]
 8003612:	b90b      	cbnz	r3, 8003618 <_vfiprintf_r+0x18>
 8003614:	f7ff fcda 	bl	8002fcc <__sinit>
 8003618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800361a:	07d9      	lsls	r1, r3, #31
 800361c:	d405      	bmi.n	800362a <_vfiprintf_r+0x2a>
 800361e:	89ab      	ldrh	r3, [r5, #12]
 8003620:	059a      	lsls	r2, r3, #22
 8003622:	d402      	bmi.n	800362a <_vfiprintf_r+0x2a>
 8003624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003626:	f7ff fec6 	bl	80033b6 <__retarget_lock_acquire_recursive>
 800362a:	89ab      	ldrh	r3, [r5, #12]
 800362c:	071b      	lsls	r3, r3, #28
 800362e:	d501      	bpl.n	8003634 <_vfiprintf_r+0x34>
 8003630:	692b      	ldr	r3, [r5, #16]
 8003632:	b99b      	cbnz	r3, 800365c <_vfiprintf_r+0x5c>
 8003634:	4629      	mov	r1, r5
 8003636:	4630      	mov	r0, r6
 8003638:	f7ff fdec 	bl	8003214 <__swsetup_r>
 800363c:	b170      	cbz	r0, 800365c <_vfiprintf_r+0x5c>
 800363e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003640:	07dc      	lsls	r4, r3, #31
 8003642:	d504      	bpl.n	800364e <_vfiprintf_r+0x4e>
 8003644:	f04f 30ff 	mov.w	r0, #4294967295
 8003648:	b01d      	add	sp, #116	; 0x74
 800364a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800364e:	89ab      	ldrh	r3, [r5, #12]
 8003650:	0598      	lsls	r0, r3, #22
 8003652:	d4f7      	bmi.n	8003644 <_vfiprintf_r+0x44>
 8003654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003656:	f7ff feaf 	bl	80033b8 <__retarget_lock_release_recursive>
 800365a:	e7f3      	b.n	8003644 <_vfiprintf_r+0x44>
 800365c:	2300      	movs	r3, #0
 800365e:	9309      	str	r3, [sp, #36]	; 0x24
 8003660:	2320      	movs	r3, #32
 8003662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003666:	f8cd 800c 	str.w	r8, [sp, #12]
 800366a:	2330      	movs	r3, #48	; 0x30
 800366c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003820 <_vfiprintf_r+0x220>
 8003670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003674:	f04f 0901 	mov.w	r9, #1
 8003678:	4623      	mov	r3, r4
 800367a:	469a      	mov	sl, r3
 800367c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003680:	b10a      	cbz	r2, 8003686 <_vfiprintf_r+0x86>
 8003682:	2a25      	cmp	r2, #37	; 0x25
 8003684:	d1f9      	bne.n	800367a <_vfiprintf_r+0x7a>
 8003686:	ebba 0b04 	subs.w	fp, sl, r4
 800368a:	d00b      	beq.n	80036a4 <_vfiprintf_r+0xa4>
 800368c:	465b      	mov	r3, fp
 800368e:	4622      	mov	r2, r4
 8003690:	4629      	mov	r1, r5
 8003692:	4630      	mov	r0, r6
 8003694:	f7ff ffa1 	bl	80035da <__sfputs_r>
 8003698:	3001      	adds	r0, #1
 800369a:	f000 80a9 	beq.w	80037f0 <_vfiprintf_r+0x1f0>
 800369e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036a0:	445a      	add	r2, fp
 80036a2:	9209      	str	r2, [sp, #36]	; 0x24
 80036a4:	f89a 3000 	ldrb.w	r3, [sl]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80a1 	beq.w	80037f0 <_vfiprintf_r+0x1f0>
 80036ae:	2300      	movs	r3, #0
 80036b0:	f04f 32ff 	mov.w	r2, #4294967295
 80036b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036b8:	f10a 0a01 	add.w	sl, sl, #1
 80036bc:	9304      	str	r3, [sp, #16]
 80036be:	9307      	str	r3, [sp, #28]
 80036c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036c4:	931a      	str	r3, [sp, #104]	; 0x68
 80036c6:	4654      	mov	r4, sl
 80036c8:	2205      	movs	r2, #5
 80036ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ce:	4854      	ldr	r0, [pc, #336]	; (8003820 <_vfiprintf_r+0x220>)
 80036d0:	f7fc fda6 	bl	8000220 <memchr>
 80036d4:	9a04      	ldr	r2, [sp, #16]
 80036d6:	b9d8      	cbnz	r0, 8003710 <_vfiprintf_r+0x110>
 80036d8:	06d1      	lsls	r1, r2, #27
 80036da:	bf44      	itt	mi
 80036dc:	2320      	movmi	r3, #32
 80036de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036e2:	0713      	lsls	r3, r2, #28
 80036e4:	bf44      	itt	mi
 80036e6:	232b      	movmi	r3, #43	; 0x2b
 80036e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036ec:	f89a 3000 	ldrb.w	r3, [sl]
 80036f0:	2b2a      	cmp	r3, #42	; 0x2a
 80036f2:	d015      	beq.n	8003720 <_vfiprintf_r+0x120>
 80036f4:	9a07      	ldr	r2, [sp, #28]
 80036f6:	4654      	mov	r4, sl
 80036f8:	2000      	movs	r0, #0
 80036fa:	f04f 0c0a 	mov.w	ip, #10
 80036fe:	4621      	mov	r1, r4
 8003700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003704:	3b30      	subs	r3, #48	; 0x30
 8003706:	2b09      	cmp	r3, #9
 8003708:	d94d      	bls.n	80037a6 <_vfiprintf_r+0x1a6>
 800370a:	b1b0      	cbz	r0, 800373a <_vfiprintf_r+0x13a>
 800370c:	9207      	str	r2, [sp, #28]
 800370e:	e014      	b.n	800373a <_vfiprintf_r+0x13a>
 8003710:	eba0 0308 	sub.w	r3, r0, r8
 8003714:	fa09 f303 	lsl.w	r3, r9, r3
 8003718:	4313      	orrs	r3, r2
 800371a:	9304      	str	r3, [sp, #16]
 800371c:	46a2      	mov	sl, r4
 800371e:	e7d2      	b.n	80036c6 <_vfiprintf_r+0xc6>
 8003720:	9b03      	ldr	r3, [sp, #12]
 8003722:	1d19      	adds	r1, r3, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	9103      	str	r1, [sp, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	bfbb      	ittet	lt
 800372c:	425b      	neglt	r3, r3
 800372e:	f042 0202 	orrlt.w	r2, r2, #2
 8003732:	9307      	strge	r3, [sp, #28]
 8003734:	9307      	strlt	r3, [sp, #28]
 8003736:	bfb8      	it	lt
 8003738:	9204      	strlt	r2, [sp, #16]
 800373a:	7823      	ldrb	r3, [r4, #0]
 800373c:	2b2e      	cmp	r3, #46	; 0x2e
 800373e:	d10c      	bne.n	800375a <_vfiprintf_r+0x15a>
 8003740:	7863      	ldrb	r3, [r4, #1]
 8003742:	2b2a      	cmp	r3, #42	; 0x2a
 8003744:	d134      	bne.n	80037b0 <_vfiprintf_r+0x1b0>
 8003746:	9b03      	ldr	r3, [sp, #12]
 8003748:	1d1a      	adds	r2, r3, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	9203      	str	r2, [sp, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	bfb8      	it	lt
 8003752:	f04f 33ff 	movlt.w	r3, #4294967295
 8003756:	3402      	adds	r4, #2
 8003758:	9305      	str	r3, [sp, #20]
 800375a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003830 <_vfiprintf_r+0x230>
 800375e:	7821      	ldrb	r1, [r4, #0]
 8003760:	2203      	movs	r2, #3
 8003762:	4650      	mov	r0, sl
 8003764:	f7fc fd5c 	bl	8000220 <memchr>
 8003768:	b138      	cbz	r0, 800377a <_vfiprintf_r+0x17a>
 800376a:	9b04      	ldr	r3, [sp, #16]
 800376c:	eba0 000a 	sub.w	r0, r0, sl
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	4082      	lsls	r2, r0
 8003774:	4313      	orrs	r3, r2
 8003776:	3401      	adds	r4, #1
 8003778:	9304      	str	r3, [sp, #16]
 800377a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800377e:	4829      	ldr	r0, [pc, #164]	; (8003824 <_vfiprintf_r+0x224>)
 8003780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003784:	2206      	movs	r2, #6
 8003786:	f7fc fd4b 	bl	8000220 <memchr>
 800378a:	2800      	cmp	r0, #0
 800378c:	d03f      	beq.n	800380e <_vfiprintf_r+0x20e>
 800378e:	4b26      	ldr	r3, [pc, #152]	; (8003828 <_vfiprintf_r+0x228>)
 8003790:	bb1b      	cbnz	r3, 80037da <_vfiprintf_r+0x1da>
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	3307      	adds	r3, #7
 8003796:	f023 0307 	bic.w	r3, r3, #7
 800379a:	3308      	adds	r3, #8
 800379c:	9303      	str	r3, [sp, #12]
 800379e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037a0:	443b      	add	r3, r7
 80037a2:	9309      	str	r3, [sp, #36]	; 0x24
 80037a4:	e768      	b.n	8003678 <_vfiprintf_r+0x78>
 80037a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80037aa:	460c      	mov	r4, r1
 80037ac:	2001      	movs	r0, #1
 80037ae:	e7a6      	b.n	80036fe <_vfiprintf_r+0xfe>
 80037b0:	2300      	movs	r3, #0
 80037b2:	3401      	adds	r4, #1
 80037b4:	9305      	str	r3, [sp, #20]
 80037b6:	4619      	mov	r1, r3
 80037b8:	f04f 0c0a 	mov.w	ip, #10
 80037bc:	4620      	mov	r0, r4
 80037be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037c2:	3a30      	subs	r2, #48	; 0x30
 80037c4:	2a09      	cmp	r2, #9
 80037c6:	d903      	bls.n	80037d0 <_vfiprintf_r+0x1d0>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0c6      	beq.n	800375a <_vfiprintf_r+0x15a>
 80037cc:	9105      	str	r1, [sp, #20]
 80037ce:	e7c4      	b.n	800375a <_vfiprintf_r+0x15a>
 80037d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80037d4:	4604      	mov	r4, r0
 80037d6:	2301      	movs	r3, #1
 80037d8:	e7f0      	b.n	80037bc <_vfiprintf_r+0x1bc>
 80037da:	ab03      	add	r3, sp, #12
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	462a      	mov	r2, r5
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <_vfiprintf_r+0x22c>)
 80037e2:	a904      	add	r1, sp, #16
 80037e4:	4630      	mov	r0, r6
 80037e6:	f3af 8000 	nop.w
 80037ea:	4607      	mov	r7, r0
 80037ec:	1c78      	adds	r0, r7, #1
 80037ee:	d1d6      	bne.n	800379e <_vfiprintf_r+0x19e>
 80037f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037f2:	07d9      	lsls	r1, r3, #31
 80037f4:	d405      	bmi.n	8003802 <_vfiprintf_r+0x202>
 80037f6:	89ab      	ldrh	r3, [r5, #12]
 80037f8:	059a      	lsls	r2, r3, #22
 80037fa:	d402      	bmi.n	8003802 <_vfiprintf_r+0x202>
 80037fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037fe:	f7ff fddb 	bl	80033b8 <__retarget_lock_release_recursive>
 8003802:	89ab      	ldrh	r3, [r5, #12]
 8003804:	065b      	lsls	r3, r3, #25
 8003806:	f53f af1d 	bmi.w	8003644 <_vfiprintf_r+0x44>
 800380a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800380c:	e71c      	b.n	8003648 <_vfiprintf_r+0x48>
 800380e:	ab03      	add	r3, sp, #12
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	462a      	mov	r2, r5
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <_vfiprintf_r+0x22c>)
 8003816:	a904      	add	r1, sp, #16
 8003818:	4630      	mov	r0, r6
 800381a:	f000 f879 	bl	8003910 <_printf_i>
 800381e:	e7e4      	b.n	80037ea <_vfiprintf_r+0x1ea>
 8003820:	08003e70 	.word	0x08003e70
 8003824:	08003e7a 	.word	0x08003e7a
 8003828:	00000000 	.word	0x00000000
 800382c:	080035db 	.word	0x080035db
 8003830:	08003e76 	.word	0x08003e76

08003834 <_printf_common>:
 8003834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003838:	4616      	mov	r6, r2
 800383a:	4699      	mov	r9, r3
 800383c:	688a      	ldr	r2, [r1, #8]
 800383e:	690b      	ldr	r3, [r1, #16]
 8003840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003844:	4293      	cmp	r3, r2
 8003846:	bfb8      	it	lt
 8003848:	4613      	movlt	r3, r2
 800384a:	6033      	str	r3, [r6, #0]
 800384c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003850:	4607      	mov	r7, r0
 8003852:	460c      	mov	r4, r1
 8003854:	b10a      	cbz	r2, 800385a <_printf_common+0x26>
 8003856:	3301      	adds	r3, #1
 8003858:	6033      	str	r3, [r6, #0]
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	0699      	lsls	r1, r3, #26
 800385e:	bf42      	ittt	mi
 8003860:	6833      	ldrmi	r3, [r6, #0]
 8003862:	3302      	addmi	r3, #2
 8003864:	6033      	strmi	r3, [r6, #0]
 8003866:	6825      	ldr	r5, [r4, #0]
 8003868:	f015 0506 	ands.w	r5, r5, #6
 800386c:	d106      	bne.n	800387c <_printf_common+0x48>
 800386e:	f104 0a19 	add.w	sl, r4, #25
 8003872:	68e3      	ldr	r3, [r4, #12]
 8003874:	6832      	ldr	r2, [r6, #0]
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	42ab      	cmp	r3, r5
 800387a:	dc26      	bgt.n	80038ca <_printf_common+0x96>
 800387c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003880:	1e13      	subs	r3, r2, #0
 8003882:	6822      	ldr	r2, [r4, #0]
 8003884:	bf18      	it	ne
 8003886:	2301      	movne	r3, #1
 8003888:	0692      	lsls	r2, r2, #26
 800388a:	d42b      	bmi.n	80038e4 <_printf_common+0xb0>
 800388c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003890:	4649      	mov	r1, r9
 8003892:	4638      	mov	r0, r7
 8003894:	47c0      	blx	r8
 8003896:	3001      	adds	r0, #1
 8003898:	d01e      	beq.n	80038d8 <_printf_common+0xa4>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	6922      	ldr	r2, [r4, #16]
 800389e:	f003 0306 	and.w	r3, r3, #6
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	bf02      	ittt	eq
 80038a6:	68e5      	ldreq	r5, [r4, #12]
 80038a8:	6833      	ldreq	r3, [r6, #0]
 80038aa:	1aed      	subeq	r5, r5, r3
 80038ac:	68a3      	ldr	r3, [r4, #8]
 80038ae:	bf0c      	ite	eq
 80038b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038b4:	2500      	movne	r5, #0
 80038b6:	4293      	cmp	r3, r2
 80038b8:	bfc4      	itt	gt
 80038ba:	1a9b      	subgt	r3, r3, r2
 80038bc:	18ed      	addgt	r5, r5, r3
 80038be:	2600      	movs	r6, #0
 80038c0:	341a      	adds	r4, #26
 80038c2:	42b5      	cmp	r5, r6
 80038c4:	d11a      	bne.n	80038fc <_printf_common+0xc8>
 80038c6:	2000      	movs	r0, #0
 80038c8:	e008      	b.n	80038dc <_printf_common+0xa8>
 80038ca:	2301      	movs	r3, #1
 80038cc:	4652      	mov	r2, sl
 80038ce:	4649      	mov	r1, r9
 80038d0:	4638      	mov	r0, r7
 80038d2:	47c0      	blx	r8
 80038d4:	3001      	adds	r0, #1
 80038d6:	d103      	bne.n	80038e0 <_printf_common+0xac>
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e0:	3501      	adds	r5, #1
 80038e2:	e7c6      	b.n	8003872 <_printf_common+0x3e>
 80038e4:	18e1      	adds	r1, r4, r3
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	2030      	movs	r0, #48	; 0x30
 80038ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038ee:	4422      	add	r2, r4
 80038f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038f8:	3302      	adds	r3, #2
 80038fa:	e7c7      	b.n	800388c <_printf_common+0x58>
 80038fc:	2301      	movs	r3, #1
 80038fe:	4622      	mov	r2, r4
 8003900:	4649      	mov	r1, r9
 8003902:	4638      	mov	r0, r7
 8003904:	47c0      	blx	r8
 8003906:	3001      	adds	r0, #1
 8003908:	d0e6      	beq.n	80038d8 <_printf_common+0xa4>
 800390a:	3601      	adds	r6, #1
 800390c:	e7d9      	b.n	80038c2 <_printf_common+0x8e>
	...

08003910 <_printf_i>:
 8003910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003914:	7e0f      	ldrb	r7, [r1, #24]
 8003916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003918:	2f78      	cmp	r7, #120	; 0x78
 800391a:	4691      	mov	r9, r2
 800391c:	4680      	mov	r8, r0
 800391e:	460c      	mov	r4, r1
 8003920:	469a      	mov	sl, r3
 8003922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003926:	d807      	bhi.n	8003938 <_printf_i+0x28>
 8003928:	2f62      	cmp	r7, #98	; 0x62
 800392a:	d80a      	bhi.n	8003942 <_printf_i+0x32>
 800392c:	2f00      	cmp	r7, #0
 800392e:	f000 80d4 	beq.w	8003ada <_printf_i+0x1ca>
 8003932:	2f58      	cmp	r7, #88	; 0x58
 8003934:	f000 80c0 	beq.w	8003ab8 <_printf_i+0x1a8>
 8003938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800393c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003940:	e03a      	b.n	80039b8 <_printf_i+0xa8>
 8003942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003946:	2b15      	cmp	r3, #21
 8003948:	d8f6      	bhi.n	8003938 <_printf_i+0x28>
 800394a:	a101      	add	r1, pc, #4	; (adr r1, 8003950 <_printf_i+0x40>)
 800394c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003950:	080039a9 	.word	0x080039a9
 8003954:	080039bd 	.word	0x080039bd
 8003958:	08003939 	.word	0x08003939
 800395c:	08003939 	.word	0x08003939
 8003960:	08003939 	.word	0x08003939
 8003964:	08003939 	.word	0x08003939
 8003968:	080039bd 	.word	0x080039bd
 800396c:	08003939 	.word	0x08003939
 8003970:	08003939 	.word	0x08003939
 8003974:	08003939 	.word	0x08003939
 8003978:	08003939 	.word	0x08003939
 800397c:	08003ac1 	.word	0x08003ac1
 8003980:	080039e9 	.word	0x080039e9
 8003984:	08003a7b 	.word	0x08003a7b
 8003988:	08003939 	.word	0x08003939
 800398c:	08003939 	.word	0x08003939
 8003990:	08003ae3 	.word	0x08003ae3
 8003994:	08003939 	.word	0x08003939
 8003998:	080039e9 	.word	0x080039e9
 800399c:	08003939 	.word	0x08003939
 80039a0:	08003939 	.word	0x08003939
 80039a4:	08003a83 	.word	0x08003a83
 80039a8:	682b      	ldr	r3, [r5, #0]
 80039aa:	1d1a      	adds	r2, r3, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	602a      	str	r2, [r5, #0]
 80039b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039b8:	2301      	movs	r3, #1
 80039ba:	e09f      	b.n	8003afc <_printf_i+0x1ec>
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	682b      	ldr	r3, [r5, #0]
 80039c0:	0607      	lsls	r7, r0, #24
 80039c2:	f103 0104 	add.w	r1, r3, #4
 80039c6:	6029      	str	r1, [r5, #0]
 80039c8:	d501      	bpl.n	80039ce <_printf_i+0xbe>
 80039ca:	681e      	ldr	r6, [r3, #0]
 80039cc:	e003      	b.n	80039d6 <_printf_i+0xc6>
 80039ce:	0646      	lsls	r6, r0, #25
 80039d0:	d5fb      	bpl.n	80039ca <_printf_i+0xba>
 80039d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80039d6:	2e00      	cmp	r6, #0
 80039d8:	da03      	bge.n	80039e2 <_printf_i+0xd2>
 80039da:	232d      	movs	r3, #45	; 0x2d
 80039dc:	4276      	negs	r6, r6
 80039de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039e2:	485a      	ldr	r0, [pc, #360]	; (8003b4c <_printf_i+0x23c>)
 80039e4:	230a      	movs	r3, #10
 80039e6:	e012      	b.n	8003a0e <_printf_i+0xfe>
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	6820      	ldr	r0, [r4, #0]
 80039ec:	1d19      	adds	r1, r3, #4
 80039ee:	6029      	str	r1, [r5, #0]
 80039f0:	0605      	lsls	r5, r0, #24
 80039f2:	d501      	bpl.n	80039f8 <_printf_i+0xe8>
 80039f4:	681e      	ldr	r6, [r3, #0]
 80039f6:	e002      	b.n	80039fe <_printf_i+0xee>
 80039f8:	0641      	lsls	r1, r0, #25
 80039fa:	d5fb      	bpl.n	80039f4 <_printf_i+0xe4>
 80039fc:	881e      	ldrh	r6, [r3, #0]
 80039fe:	4853      	ldr	r0, [pc, #332]	; (8003b4c <_printf_i+0x23c>)
 8003a00:	2f6f      	cmp	r7, #111	; 0x6f
 8003a02:	bf0c      	ite	eq
 8003a04:	2308      	moveq	r3, #8
 8003a06:	230a      	movne	r3, #10
 8003a08:	2100      	movs	r1, #0
 8003a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a0e:	6865      	ldr	r5, [r4, #4]
 8003a10:	60a5      	str	r5, [r4, #8]
 8003a12:	2d00      	cmp	r5, #0
 8003a14:	bfa2      	ittt	ge
 8003a16:	6821      	ldrge	r1, [r4, #0]
 8003a18:	f021 0104 	bicge.w	r1, r1, #4
 8003a1c:	6021      	strge	r1, [r4, #0]
 8003a1e:	b90e      	cbnz	r6, 8003a24 <_printf_i+0x114>
 8003a20:	2d00      	cmp	r5, #0
 8003a22:	d04b      	beq.n	8003abc <_printf_i+0x1ac>
 8003a24:	4615      	mov	r5, r2
 8003a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8003a2e:	5dc7      	ldrb	r7, [r0, r7]
 8003a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a34:	4637      	mov	r7, r6
 8003a36:	42bb      	cmp	r3, r7
 8003a38:	460e      	mov	r6, r1
 8003a3a:	d9f4      	bls.n	8003a26 <_printf_i+0x116>
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d10b      	bne.n	8003a58 <_printf_i+0x148>
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	07de      	lsls	r6, r3, #31
 8003a44:	d508      	bpl.n	8003a58 <_printf_i+0x148>
 8003a46:	6923      	ldr	r3, [r4, #16]
 8003a48:	6861      	ldr	r1, [r4, #4]
 8003a4a:	4299      	cmp	r1, r3
 8003a4c:	bfde      	ittt	le
 8003a4e:	2330      	movle	r3, #48	; 0x30
 8003a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a58:	1b52      	subs	r2, r2, r5
 8003a5a:	6122      	str	r2, [r4, #16]
 8003a5c:	f8cd a000 	str.w	sl, [sp]
 8003a60:	464b      	mov	r3, r9
 8003a62:	aa03      	add	r2, sp, #12
 8003a64:	4621      	mov	r1, r4
 8003a66:	4640      	mov	r0, r8
 8003a68:	f7ff fee4 	bl	8003834 <_printf_common>
 8003a6c:	3001      	adds	r0, #1
 8003a6e:	d14a      	bne.n	8003b06 <_printf_i+0x1f6>
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	b004      	add	sp, #16
 8003a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	f043 0320 	orr.w	r3, r3, #32
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	4833      	ldr	r0, [pc, #204]	; (8003b50 <_printf_i+0x240>)
 8003a84:	2778      	movs	r7, #120	; 0x78
 8003a86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	6829      	ldr	r1, [r5, #0]
 8003a8e:	061f      	lsls	r7, r3, #24
 8003a90:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a94:	d402      	bmi.n	8003a9c <_printf_i+0x18c>
 8003a96:	065f      	lsls	r7, r3, #25
 8003a98:	bf48      	it	mi
 8003a9a:	b2b6      	uxthmi	r6, r6
 8003a9c:	07df      	lsls	r7, r3, #31
 8003a9e:	bf48      	it	mi
 8003aa0:	f043 0320 	orrmi.w	r3, r3, #32
 8003aa4:	6029      	str	r1, [r5, #0]
 8003aa6:	bf48      	it	mi
 8003aa8:	6023      	strmi	r3, [r4, #0]
 8003aaa:	b91e      	cbnz	r6, 8003ab4 <_printf_i+0x1a4>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	f023 0320 	bic.w	r3, r3, #32
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	e7a7      	b.n	8003a08 <_printf_i+0xf8>
 8003ab8:	4824      	ldr	r0, [pc, #144]	; (8003b4c <_printf_i+0x23c>)
 8003aba:	e7e4      	b.n	8003a86 <_printf_i+0x176>
 8003abc:	4615      	mov	r5, r2
 8003abe:	e7bd      	b.n	8003a3c <_printf_i+0x12c>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	6826      	ldr	r6, [r4, #0]
 8003ac4:	6961      	ldr	r1, [r4, #20]
 8003ac6:	1d18      	adds	r0, r3, #4
 8003ac8:	6028      	str	r0, [r5, #0]
 8003aca:	0635      	lsls	r5, r6, #24
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	d501      	bpl.n	8003ad4 <_printf_i+0x1c4>
 8003ad0:	6019      	str	r1, [r3, #0]
 8003ad2:	e002      	b.n	8003ada <_printf_i+0x1ca>
 8003ad4:	0670      	lsls	r0, r6, #25
 8003ad6:	d5fb      	bpl.n	8003ad0 <_printf_i+0x1c0>
 8003ad8:	8019      	strh	r1, [r3, #0]
 8003ada:	2300      	movs	r3, #0
 8003adc:	6123      	str	r3, [r4, #16]
 8003ade:	4615      	mov	r5, r2
 8003ae0:	e7bc      	b.n	8003a5c <_printf_i+0x14c>
 8003ae2:	682b      	ldr	r3, [r5, #0]
 8003ae4:	1d1a      	adds	r2, r3, #4
 8003ae6:	602a      	str	r2, [r5, #0]
 8003ae8:	681d      	ldr	r5, [r3, #0]
 8003aea:	6862      	ldr	r2, [r4, #4]
 8003aec:	2100      	movs	r1, #0
 8003aee:	4628      	mov	r0, r5
 8003af0:	f7fc fb96 	bl	8000220 <memchr>
 8003af4:	b108      	cbz	r0, 8003afa <_printf_i+0x1ea>
 8003af6:	1b40      	subs	r0, r0, r5
 8003af8:	6060      	str	r0, [r4, #4]
 8003afa:	6863      	ldr	r3, [r4, #4]
 8003afc:	6123      	str	r3, [r4, #16]
 8003afe:	2300      	movs	r3, #0
 8003b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b04:	e7aa      	b.n	8003a5c <_printf_i+0x14c>
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	462a      	mov	r2, r5
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	47d0      	blx	sl
 8003b10:	3001      	adds	r0, #1
 8003b12:	d0ad      	beq.n	8003a70 <_printf_i+0x160>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	079b      	lsls	r3, r3, #30
 8003b18:	d413      	bmi.n	8003b42 <_printf_i+0x232>
 8003b1a:	68e0      	ldr	r0, [r4, #12]
 8003b1c:	9b03      	ldr	r3, [sp, #12]
 8003b1e:	4298      	cmp	r0, r3
 8003b20:	bfb8      	it	lt
 8003b22:	4618      	movlt	r0, r3
 8003b24:	e7a6      	b.n	8003a74 <_printf_i+0x164>
 8003b26:	2301      	movs	r3, #1
 8003b28:	4632      	mov	r2, r6
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	47d0      	blx	sl
 8003b30:	3001      	adds	r0, #1
 8003b32:	d09d      	beq.n	8003a70 <_printf_i+0x160>
 8003b34:	3501      	adds	r5, #1
 8003b36:	68e3      	ldr	r3, [r4, #12]
 8003b38:	9903      	ldr	r1, [sp, #12]
 8003b3a:	1a5b      	subs	r3, r3, r1
 8003b3c:	42ab      	cmp	r3, r5
 8003b3e:	dcf2      	bgt.n	8003b26 <_printf_i+0x216>
 8003b40:	e7eb      	b.n	8003b1a <_printf_i+0x20a>
 8003b42:	2500      	movs	r5, #0
 8003b44:	f104 0619 	add.w	r6, r4, #25
 8003b48:	e7f5      	b.n	8003b36 <_printf_i+0x226>
 8003b4a:	bf00      	nop
 8003b4c:	08003e81 	.word	0x08003e81
 8003b50:	08003e92 	.word	0x08003e92

08003b54 <__sflush_r>:
 8003b54:	898a      	ldrh	r2, [r1, #12]
 8003b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b5a:	4605      	mov	r5, r0
 8003b5c:	0710      	lsls	r0, r2, #28
 8003b5e:	460c      	mov	r4, r1
 8003b60:	d458      	bmi.n	8003c14 <__sflush_r+0xc0>
 8003b62:	684b      	ldr	r3, [r1, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	dc05      	bgt.n	8003b74 <__sflush_r+0x20>
 8003b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	dc02      	bgt.n	8003b74 <__sflush_r+0x20>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b76:	2e00      	cmp	r6, #0
 8003b78:	d0f9      	beq.n	8003b6e <__sflush_r+0x1a>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b80:	682f      	ldr	r7, [r5, #0]
 8003b82:	6a21      	ldr	r1, [r4, #32]
 8003b84:	602b      	str	r3, [r5, #0]
 8003b86:	d032      	beq.n	8003bee <__sflush_r+0x9a>
 8003b88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b8a:	89a3      	ldrh	r3, [r4, #12]
 8003b8c:	075a      	lsls	r2, r3, #29
 8003b8e:	d505      	bpl.n	8003b9c <__sflush_r+0x48>
 8003b90:	6863      	ldr	r3, [r4, #4]
 8003b92:	1ac0      	subs	r0, r0, r3
 8003b94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b96:	b10b      	cbz	r3, 8003b9c <__sflush_r+0x48>
 8003b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b9a:	1ac0      	subs	r0, r0, r3
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ba2:	6a21      	ldr	r1, [r4, #32]
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	47b0      	blx	r6
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	d106      	bne.n	8003bbc <__sflush_r+0x68>
 8003bae:	6829      	ldr	r1, [r5, #0]
 8003bb0:	291d      	cmp	r1, #29
 8003bb2:	d82b      	bhi.n	8003c0c <__sflush_r+0xb8>
 8003bb4:	4a29      	ldr	r2, [pc, #164]	; (8003c5c <__sflush_r+0x108>)
 8003bb6:	410a      	asrs	r2, r1
 8003bb8:	07d6      	lsls	r6, r2, #31
 8003bba:	d427      	bmi.n	8003c0c <__sflush_r+0xb8>
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	6062      	str	r2, [r4, #4]
 8003bc0:	04d9      	lsls	r1, r3, #19
 8003bc2:	6922      	ldr	r2, [r4, #16]
 8003bc4:	6022      	str	r2, [r4, #0]
 8003bc6:	d504      	bpl.n	8003bd2 <__sflush_r+0x7e>
 8003bc8:	1c42      	adds	r2, r0, #1
 8003bca:	d101      	bne.n	8003bd0 <__sflush_r+0x7c>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	b903      	cbnz	r3, 8003bd2 <__sflush_r+0x7e>
 8003bd0:	6560      	str	r0, [r4, #84]	; 0x54
 8003bd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bd4:	602f      	str	r7, [r5, #0]
 8003bd6:	2900      	cmp	r1, #0
 8003bd8:	d0c9      	beq.n	8003b6e <__sflush_r+0x1a>
 8003bda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bde:	4299      	cmp	r1, r3
 8003be0:	d002      	beq.n	8003be8 <__sflush_r+0x94>
 8003be2:	4628      	mov	r0, r5
 8003be4:	f7ff fbea 	bl	80033bc <_free_r>
 8003be8:	2000      	movs	r0, #0
 8003bea:	6360      	str	r0, [r4, #52]	; 0x34
 8003bec:	e7c0      	b.n	8003b70 <__sflush_r+0x1c>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	47b0      	blx	r6
 8003bf4:	1c41      	adds	r1, r0, #1
 8003bf6:	d1c8      	bne.n	8003b8a <__sflush_r+0x36>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0c5      	beq.n	8003b8a <__sflush_r+0x36>
 8003bfe:	2b1d      	cmp	r3, #29
 8003c00:	d001      	beq.n	8003c06 <__sflush_r+0xb2>
 8003c02:	2b16      	cmp	r3, #22
 8003c04:	d101      	bne.n	8003c0a <__sflush_r+0xb6>
 8003c06:	602f      	str	r7, [r5, #0]
 8003c08:	e7b1      	b.n	8003b6e <__sflush_r+0x1a>
 8003c0a:	89a3      	ldrh	r3, [r4, #12]
 8003c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c10:	81a3      	strh	r3, [r4, #12]
 8003c12:	e7ad      	b.n	8003b70 <__sflush_r+0x1c>
 8003c14:	690f      	ldr	r7, [r1, #16]
 8003c16:	2f00      	cmp	r7, #0
 8003c18:	d0a9      	beq.n	8003b6e <__sflush_r+0x1a>
 8003c1a:	0793      	lsls	r3, r2, #30
 8003c1c:	680e      	ldr	r6, [r1, #0]
 8003c1e:	bf08      	it	eq
 8003c20:	694b      	ldreq	r3, [r1, #20]
 8003c22:	600f      	str	r7, [r1, #0]
 8003c24:	bf18      	it	ne
 8003c26:	2300      	movne	r3, #0
 8003c28:	eba6 0807 	sub.w	r8, r6, r7
 8003c2c:	608b      	str	r3, [r1, #8]
 8003c2e:	f1b8 0f00 	cmp.w	r8, #0
 8003c32:	dd9c      	ble.n	8003b6e <__sflush_r+0x1a>
 8003c34:	6a21      	ldr	r1, [r4, #32]
 8003c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c38:	4643      	mov	r3, r8
 8003c3a:	463a      	mov	r2, r7
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	47b0      	blx	r6
 8003c40:	2800      	cmp	r0, #0
 8003c42:	dc06      	bgt.n	8003c52 <__sflush_r+0xfe>
 8003c44:	89a3      	ldrh	r3, [r4, #12]
 8003c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4a:	81a3      	strh	r3, [r4, #12]
 8003c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c50:	e78e      	b.n	8003b70 <__sflush_r+0x1c>
 8003c52:	4407      	add	r7, r0
 8003c54:	eba8 0800 	sub.w	r8, r8, r0
 8003c58:	e7e9      	b.n	8003c2e <__sflush_r+0xda>
 8003c5a:	bf00      	nop
 8003c5c:	dfbffffe 	.word	0xdfbffffe

08003c60 <_fflush_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	690b      	ldr	r3, [r1, #16]
 8003c64:	4605      	mov	r5, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	b913      	cbnz	r3, 8003c70 <_fflush_r+0x10>
 8003c6a:	2500      	movs	r5, #0
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	bd38      	pop	{r3, r4, r5, pc}
 8003c70:	b118      	cbz	r0, 8003c7a <_fflush_r+0x1a>
 8003c72:	6a03      	ldr	r3, [r0, #32]
 8003c74:	b90b      	cbnz	r3, 8003c7a <_fflush_r+0x1a>
 8003c76:	f7ff f9a9 	bl	8002fcc <__sinit>
 8003c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f3      	beq.n	8003c6a <_fflush_r+0xa>
 8003c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c84:	07d0      	lsls	r0, r2, #31
 8003c86:	d404      	bmi.n	8003c92 <_fflush_r+0x32>
 8003c88:	0599      	lsls	r1, r3, #22
 8003c8a:	d402      	bmi.n	8003c92 <_fflush_r+0x32>
 8003c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c8e:	f7ff fb92 	bl	80033b6 <__retarget_lock_acquire_recursive>
 8003c92:	4628      	mov	r0, r5
 8003c94:	4621      	mov	r1, r4
 8003c96:	f7ff ff5d 	bl	8003b54 <__sflush_r>
 8003c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c9c:	07da      	lsls	r2, r3, #31
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	d4e4      	bmi.n	8003c6c <_fflush_r+0xc>
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	059b      	lsls	r3, r3, #22
 8003ca6:	d4e1      	bmi.n	8003c6c <_fflush_r+0xc>
 8003ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003caa:	f7ff fb85 	bl	80033b8 <__retarget_lock_release_recursive>
 8003cae:	e7dd      	b.n	8003c6c <_fflush_r+0xc>

08003cb0 <__swhatbuf_r>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	b096      	sub	sp, #88	; 0x58
 8003cbc:	4615      	mov	r5, r2
 8003cbe:	461e      	mov	r6, r3
 8003cc0:	da0d      	bge.n	8003cde <__swhatbuf_r+0x2e>
 8003cc2:	89a3      	ldrh	r3, [r4, #12]
 8003cc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003cc8:	f04f 0100 	mov.w	r1, #0
 8003ccc:	bf0c      	ite	eq
 8003cce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003cd2:	2340      	movne	r3, #64	; 0x40
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	6031      	str	r1, [r6, #0]
 8003cd8:	602b      	str	r3, [r5, #0]
 8003cda:	b016      	add	sp, #88	; 0x58
 8003cdc:	bd70      	pop	{r4, r5, r6, pc}
 8003cde:	466a      	mov	r2, sp
 8003ce0:	f000 f848 	bl	8003d74 <_fstat_r>
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	dbec      	blt.n	8003cc2 <__swhatbuf_r+0x12>
 8003ce8:	9901      	ldr	r1, [sp, #4]
 8003cea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003cee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003cf2:	4259      	negs	r1, r3
 8003cf4:	4159      	adcs	r1, r3
 8003cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cfa:	e7eb      	b.n	8003cd4 <__swhatbuf_r+0x24>

08003cfc <__smakebuf_r>:
 8003cfc:	898b      	ldrh	r3, [r1, #12]
 8003cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d00:	079d      	lsls	r5, r3, #30
 8003d02:	4606      	mov	r6, r0
 8003d04:	460c      	mov	r4, r1
 8003d06:	d507      	bpl.n	8003d18 <__smakebuf_r+0x1c>
 8003d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	6123      	str	r3, [r4, #16]
 8003d10:	2301      	movs	r3, #1
 8003d12:	6163      	str	r3, [r4, #20]
 8003d14:	b002      	add	sp, #8
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	ab01      	add	r3, sp, #4
 8003d1a:	466a      	mov	r2, sp
 8003d1c:	f7ff ffc8 	bl	8003cb0 <__swhatbuf_r>
 8003d20:	9900      	ldr	r1, [sp, #0]
 8003d22:	4605      	mov	r5, r0
 8003d24:	4630      	mov	r0, r6
 8003d26:	f7ff fbb5 	bl	8003494 <_malloc_r>
 8003d2a:	b948      	cbnz	r0, 8003d40 <__smakebuf_r+0x44>
 8003d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d30:	059a      	lsls	r2, r3, #22
 8003d32:	d4ef      	bmi.n	8003d14 <__smakebuf_r+0x18>
 8003d34:	f023 0303 	bic.w	r3, r3, #3
 8003d38:	f043 0302 	orr.w	r3, r3, #2
 8003d3c:	81a3      	strh	r3, [r4, #12]
 8003d3e:	e7e3      	b.n	8003d08 <__smakebuf_r+0xc>
 8003d40:	89a3      	ldrh	r3, [r4, #12]
 8003d42:	6020      	str	r0, [r4, #0]
 8003d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d48:	81a3      	strh	r3, [r4, #12]
 8003d4a:	9b00      	ldr	r3, [sp, #0]
 8003d4c:	6163      	str	r3, [r4, #20]
 8003d4e:	9b01      	ldr	r3, [sp, #4]
 8003d50:	6120      	str	r0, [r4, #16]
 8003d52:	b15b      	cbz	r3, 8003d6c <__smakebuf_r+0x70>
 8003d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d58:	4630      	mov	r0, r6
 8003d5a:	f000 f81d 	bl	8003d98 <_isatty_r>
 8003d5e:	b128      	cbz	r0, 8003d6c <__smakebuf_r+0x70>
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	f023 0303 	bic.w	r3, r3, #3
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	81a3      	strh	r3, [r4, #12]
 8003d6c:	89a3      	ldrh	r3, [r4, #12]
 8003d6e:	431d      	orrs	r5, r3
 8003d70:	81a5      	strh	r5, [r4, #12]
 8003d72:	e7cf      	b.n	8003d14 <__smakebuf_r+0x18>

08003d74 <_fstat_r>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4d07      	ldr	r5, [pc, #28]	; (8003d94 <_fstat_r+0x20>)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	602b      	str	r3, [r5, #0]
 8003d82:	f7fd fb90 	bl	80014a6 <_fstat>
 8003d86:	1c43      	adds	r3, r0, #1
 8003d88:	d102      	bne.n	8003d90 <_fstat_r+0x1c>
 8003d8a:	682b      	ldr	r3, [r5, #0]
 8003d8c:	b103      	cbz	r3, 8003d90 <_fstat_r+0x1c>
 8003d8e:	6023      	str	r3, [r4, #0]
 8003d90:	bd38      	pop	{r3, r4, r5, pc}
 8003d92:	bf00      	nop
 8003d94:	20000408 	.word	0x20000408

08003d98 <_isatty_r>:
 8003d98:	b538      	push	{r3, r4, r5, lr}
 8003d9a:	4d06      	ldr	r5, [pc, #24]	; (8003db4 <_isatty_r+0x1c>)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	4604      	mov	r4, r0
 8003da0:	4608      	mov	r0, r1
 8003da2:	602b      	str	r3, [r5, #0]
 8003da4:	f7fd fb8f 	bl	80014c6 <_isatty>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d102      	bne.n	8003db2 <_isatty_r+0x1a>
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	b103      	cbz	r3, 8003db2 <_isatty_r+0x1a>
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	bd38      	pop	{r3, r4, r5, pc}
 8003db4:	20000408 	.word	0x20000408

08003db8 <_sbrk_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4d06      	ldr	r5, [pc, #24]	; (8003dd4 <_sbrk_r+0x1c>)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	602b      	str	r3, [r5, #0]
 8003dc4:	f7fd fb98 	bl	80014f8 <_sbrk>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	d102      	bne.n	8003dd2 <_sbrk_r+0x1a>
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	b103      	cbz	r3, 8003dd2 <_sbrk_r+0x1a>
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
 8003dd4:	20000408 	.word	0x20000408

08003dd8 <_init>:
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dda:	bf00      	nop
 8003ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dde:	bc08      	pop	{r3}
 8003de0:	469e      	mov	lr, r3
 8003de2:	4770      	bx	lr

08003de4 <_fini>:
 8003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de6:	bf00      	nop
 8003de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dea:	bc08      	pop	{r3}
 8003dec:	469e      	mov	lr, r3
 8003dee:	4770      	bx	lr
